// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package migracion_cajamar.seguridad_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Seguridad Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class Seguridad implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Seguridad";
	private final String projectName = "MIGRACION_CAJAMAR";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Seguridad.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Seguridad.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_11_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_12_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

					try {

						conn_tDBCommit_1.commit();

					} finally {

						conn_tDBCommit_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_2"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				/**
				 * [tDBCommit_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String properties_tDBConnection_1 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBConnection_1.contains("rewriteBatchedStatements=")) {
						properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBConnection_1.contains("allowLoadLocalInfile=")) {
						properties_tDBConnection_1 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBConnection_1 = "jdbc:mysql://" + "3.71.174.230" + ":" + "3306" + "/" + "pro_db_hayakeys"
						+ "?" + properties_tDBConnection_1;
				String dbUser_tDBConnection_1 = "cajamar";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:SNt4ZTxDHQGa1/UzYk2CytrKx8PuANEuGdf+5veqhw26oN8BqPV1JQqJ");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("db_tDBConnection_1", "pro_db_hayakeys");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBConnection_2Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_2 begin ] start
				 */

				ok_Hash.put("tDBConnection_2", false);
				start_Hash.put("tDBConnection_2", System.currentTimeMillis());

				currentComponent = "tDBConnection_2";

				int tos_count_tDBConnection_2 = 0;

				String properties_tDBConnection_2 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBConnection_2 == null || properties_tDBConnection_2.trim().length() == 0) {
					properties_tDBConnection_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBConnection_2.contains("rewriteBatchedStatements=")) {
						properties_tDBConnection_2 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBConnection_2.contains("allowLoadLocalInfile=")) {
						properties_tDBConnection_2 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBConnection_2 = "jdbc:mysql://" + "3.71.174.230" + ":" + "3306" + "/" + "db_cajamar" + "?"
						+ properties_tDBConnection_2;
				String dbUser_tDBConnection_2 = "cajamar";

				final String decryptedPassword_tDBConnection_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:CqJ5tM+XPP8lyafzdHFf09ChpYmbgHSgTW0BkKFeYDoTdpXXXXKEeNuG");
				String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;

				java.sql.Connection conn_tDBConnection_2 = null;

				String driverClass_tDBConnection_2 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
				globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);

				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2, dbUser_tDBConnection_2,
						dbPwd_tDBConnection_2);

				globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
				if (null != conn_tDBConnection_2) {

					conn_tDBConnection_2.setAutoCommit(false);
				}

				globalMap.put("db_tDBConnection_2", "db_cajamar");

				/**
				 * [tDBConnection_2 begin ] stop
				 */

				/**
				 * [tDBConnection_2 main ] start
				 */

				currentComponent = "tDBConnection_2";

				tos_count_tDBConnection_2++;

				/**
				 * [tDBConnection_2 main ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_end ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_2 end ] start
				 */

				currentComponent = "tDBConnection_2";

				ok_Hash.put("tDBConnection_2", true);
				end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				/**
				 * [tDBConnection_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_2 finally ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		static byte[] commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer asset_id;

		public Integer getAsset_id() {
			return this.asset_id;
		}

		public int security_element_type_id;

		public int getSecurity_element_type_id() {
			return this.security_element_type_id;
		}

		public java.util.Date created;

		public java.util.Date getCreated() {
			return this.created;
		}

		public java.util.Date deleted;

		public java.util.Date getDeleted() {
			return this.deleted;
		}

		public java.util.Date modified;

		public java.util.Date getModified() {
			return this.modified;
		}

		public Integer security_provider_id;

		public Integer getSecurity_provider_id() {
			return this.security_provider_id;
		}

		public java.util.Date fecha_instalacion;

		public java.util.Date getFecha_instalacion() {
			return this.fecha_instalacion;
		}

		public java.util.Date fecha_preparacion;

		public java.util.Date getFecha_preparacion() {
			return this.fecha_preparacion;
		}

		public java.util.Date fecha_baja;

		public java.util.Date getFecha_baja() {
			return this.fecha_baja;
		}

		public Integer security_status_id;

		public Integer getSecurity_status_id() {
			return this.security_status_id;
		}

		public Integer security_peticionario_id;

		public Integer getSecurity_peticionario_id() {
			return this.security_peticionario_id;
		}

		public Float coste_mensual;

		public Float getCoste_mensual() {
			return this.coste_mensual;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		public Integer haya_id;

		public Integer getHaya_id() {
			return this.haya_id;
		}

		public Integer security_promotion_tipology_id;

		public Integer getSecurity_promotion_tipology_id() {
			return this.security_promotion_tipology_id;
		}

		public java.util.Date fecha_aceptacion;

		public java.util.Date getFecha_aceptacion() {
			return this.fecha_aceptacion;
		}

		public Integer incident_origin_id;

		public Integer getIncident_origin_id() {
			return this.incident_origin_id;
		}

		public java.util.Date fecha_aviso_incidencia;

		public java.util.Date getFecha_aviso_incidencia() {
			return this.fecha_aviso_incidencia;
		}

		public Integer incident_type_id;

		public Integer getIncident_type_id() {
			return this.incident_type_id;
		}

		public Integer vandalized_item_id;

		public Integer getVandalized_item_id() {
			return this.vandalized_item_id;
		}

		public Boolean peticion_acuda;

		public Boolean getPeticion_acuda() {
			return this.peticion_acuda;
		}

		public java.util.Date fecha_peticion_acuda;

		public java.util.Date getFecha_peticion_acuda() {
			return this.fecha_peticion_acuda;
		}

		public java.util.Date fecha_presencia_acuda;

		public java.util.Date getFecha_presencia_acuda() {
			return this.fecha_presencia_acuda;
		}

		public Boolean peticion_cerrajero;

		public Boolean getPeticion_cerrajero() {
			return this.peticion_cerrajero;
		}

		public java.util.Date fecha_peticion_cerrajero;

		public java.util.Date getFecha_peticion_cerrajero() {
			return this.fecha_peticion_cerrajero;
		}

		public java.util.Date fecha_presencia_cerrajero;

		public java.util.Date getFecha_presencia_cerrajero() {
			return this.fecha_presencia_cerrajero;
		}

		public Boolean ocupado;

		public Boolean getOcupado() {
			return this.ocupado;
		}

		public java.util.Date fecha_ocupado;

		public java.util.Date getFecha_ocupado() {
			return this.fecha_ocupado;
		}

		public String observaciones_ocupado_si;

		public String getObservaciones_ocupado_si() {
			return this.observaciones_ocupado_si;
		}

		public Boolean restablecer_alarma;

		public Boolean getRestablecer_alarma() {
			return this.restablecer_alarma;
		}

		public Boolean reparar_accesos;

		public Boolean getReparar_accesos() {
			return this.reparar_accesos;
		}

		public String observaciones_ocupado_no;

		public String getObservaciones_ocupado_no() {
			return this.observaciones_ocupado_no;
		}

		public Integer occupation_reason_id;

		public Integer getOccupation_reason_id() {
			return this.occupation_reason_id;
		}

		public String rep_file_ids;

		public String getRep_file_ids() {
			return this.rep_file_ids;
		}

		public Integer cp_user_id;

		public Integer getCp_user_id() {
			return this.cp_user_id;
		}

		public String other_field_incident_origin;

		public String getOther_field_incident_origin() {
			return this.other_field_incident_origin;
		}

		public Integer provider_cra_id;

		public Integer getProvider_cra_id() {
			return this.provider_cra_id;
		}

		public Integer false_alarm_type_id;

		public Integer getFalse_alarm_type_id() {
			return this.false_alarm_type_id;
		}

		public String other_field_incident_type;

		public String getOther_field_incident_type() {
			return this.other_field_incident_type;
		}

		public java.util.Date fecha_restablecer_alarma;

		public java.util.Date getFecha_restablecer_alarma() {
			return this.fecha_restablecer_alarma;
		}

		public Integer security_billing_scheme_id;

		public Integer getSecurity_billing_scheme_id() {
			return this.security_billing_scheme_id;
		}

		public String id_promocion_origen;

		public String getId_promocion_origen() {
			return this.id_promocion_origen;
		}

		public String id_agrupacion_obra_nueva;

		public String getId_agrupacion_obra_nueva() {
			return this.id_agrupacion_obra_nueva;
		}

		public Integer cp_section_id;

		public Integer getCp_section_id() {
			return this.cp_section_id;
		}

		public Integer security_element_order_status_id;

		public Integer getSecurity_element_order_status_id() {
			return this.security_element_order_status_id;
		}

		public Integer key_chain_id;

		public Integer getKey_chain_id() {
			return this.key_chain_id;
		}

		public Integer security_element_sub_status_id;

		public Integer getSecurity_element_sub_status_id() {
			return this.security_element_sub_status_id;
		}

		public Boolean check_common_zone;

		public Boolean getCheck_common_zone() {
			return this.check_common_zone;
		}

		public Boolean check_by_asset;

		public Boolean getCheck_by_asset() {
			return this.check_by_asset;
		}

		public BigDecimal fail_cost;

		public BigDecimal getFail_cost() {
			return this.fail_cost;
		}

		public String observation_fail;

		public String getObservation_fail() {
			return this.observation_fail;
		}

		public Integer security_element_multiple_id;

		public Integer getSecurity_element_multiple_id() {
			return this.security_element_multiple_id;
		}

		public Integer security_element_vigilance_type_id;

		public Integer getSecurity_element_vigilance_type_id() {
			return this.security_element_vigilance_type_id;
		}

		public String reason_reject_validation_hre;

		public String getReason_reject_validation_hre() {
			return this.reason_reject_validation_hre;
		}

		public Integer petitioner_cp_user_id;

		public Integer getPetitioner_cp_user_id() {
			return this.petitioner_cp_user_id;
		}

		public Integer low_petitioner_cp_user_id;

		public Integer getLow_petitioner_cp_user_id() {
			return this.low_petitioner_cp_user_id;
		}

		public Integer provider_cp_user_id;

		public Integer getProvider_cp_user_id() {
			return this.provider_cp_user_id;
		}

		public Integer low_provider_cp_user_id;

		public Integer getLow_provider_cp_user_id() {
			return this.low_provider_cp_user_id;
		}

		public Integer low_security_provider_id;

		public Integer getLow_security_provider_id() {
			return this.low_security_provider_id;
		}

		public BigDecimal default_installation_cost;

		public BigDecimal getDefault_installation_cost() {
			return this.default_installation_cost;
		}

		public BigDecimal default_monthly_cost;

		public BigDecimal getDefault_monthly_cost() {
			return this.default_monthly_cost;
		}

		public BigDecimal default_low_cost;

		public BigDecimal getDefault_low_cost() {
			return this.default_low_cost;
		}

		public String low_task_id;

		public String getLow_task_id() {
			return this.low_task_id;
		}

		public String task_id;

		public String getTask_id() {
			return this.task_id;
		}

		public Long work_order_id;

		public Long getWork_order_id() {
			return this.work_order_id;
		}

		public Integer security_element_word_order_status_id;

		public Integer getSecurity_element_word_order_status_id() {
			return this.security_element_word_order_status_id;
		}

		public Integer asset_occupation_report_id;

		public Integer getAsset_occupation_report_id() {
			return this.asset_occupation_report_id;
		}

		public Integer security_element_occupation_validation_status_id;

		public Integer getSecurity_element_occupation_validation_status_id() {
			return this.security_element_occupation_validation_status_id;
		}

		public Integer security_element_origin_id;

		public Integer getSecurity_element_origin_id() {
			return this.security_element_origin_id;
		}

		public java.util.Date validation_date;

		public java.util.Date getValidation_date() {
			return this.validation_date;
		}

		public Integer validation_cp_user_id;

		public Integer getValidation_cp_user_id() {
			return this.validation_cp_user_id;
		}

		public Integer occupation_manager_cp_user_id;

		public Integer getOccupation_manager_cp_user_id() {
			return this.occupation_manager_cp_user_id;
		}

		public Integer acuda_provider_id;

		public Integer getAcuda_provider_id() {
			return this.acuda_provider_id;
		}

		public Integer locksmith_provider_id;

		public Integer getLocksmith_provider_id() {
			return this.locksmith_provider_id;
		}

		public Integer procedure_lawyer_id;

		public Integer getProcedure_lawyer_id() {
			return this.procedure_lawyer_id;
		}

		public Byte is_recoverable;

		public Byte getIs_recoverable() {
			return this.is_recoverable;
		}

		public Long acuda_asset_technical_work_id;

		public Long getAcuda_asset_technical_work_id() {
			return this.acuda_asset_technical_work_id;
		}

		public Long locksmith_asset_technical_work_id;

		public Long getLocksmith_asset_technical_work_id() {
			return this.locksmith_asset_technical_work_id;
		}

		public Integer vigilance_security_element_id;

		public Integer getVigilance_security_element_id() {
			return this.vigilance_security_element_id;
		}

		public Long security_provider_asset_technical_work_id;

		public Long getSecurity_provider_asset_technical_work_id() {
			return this.security_provider_asset_technical_work_id;
		}

		public Integer alarm_security_provider_id;

		public Integer getAlarm_security_provider_id() {
			return this.alarm_security_provider_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.id = this.id;
			other.asset_id = this.asset_id;
			other.security_element_type_id = this.security_element_type_id;
			other.created = this.created;
			other.deleted = this.deleted;
			other.modified = this.modified;
			other.security_provider_id = this.security_provider_id;
			other.fecha_instalacion = this.fecha_instalacion;
			other.fecha_preparacion = this.fecha_preparacion;
			other.fecha_baja = this.fecha_baja;
			other.security_status_id = this.security_status_id;
			other.security_peticionario_id = this.security_peticionario_id;
			other.coste_mensual = this.coste_mensual;
			other.data = this.data;
			other.haya_id = this.haya_id;
			other.security_promotion_tipology_id = this.security_promotion_tipology_id;
			other.fecha_aceptacion = this.fecha_aceptacion;
			other.incident_origin_id = this.incident_origin_id;
			other.fecha_aviso_incidencia = this.fecha_aviso_incidencia;
			other.incident_type_id = this.incident_type_id;
			other.vandalized_item_id = this.vandalized_item_id;
			other.peticion_acuda = this.peticion_acuda;
			other.fecha_peticion_acuda = this.fecha_peticion_acuda;
			other.fecha_presencia_acuda = this.fecha_presencia_acuda;
			other.peticion_cerrajero = this.peticion_cerrajero;
			other.fecha_peticion_cerrajero = this.fecha_peticion_cerrajero;
			other.fecha_presencia_cerrajero = this.fecha_presencia_cerrajero;
			other.ocupado = this.ocupado;
			other.fecha_ocupado = this.fecha_ocupado;
			other.observaciones_ocupado_si = this.observaciones_ocupado_si;
			other.restablecer_alarma = this.restablecer_alarma;
			other.reparar_accesos = this.reparar_accesos;
			other.observaciones_ocupado_no = this.observaciones_ocupado_no;
			other.occupation_reason_id = this.occupation_reason_id;
			other.rep_file_ids = this.rep_file_ids;
			other.cp_user_id = this.cp_user_id;
			other.other_field_incident_origin = this.other_field_incident_origin;
			other.provider_cra_id = this.provider_cra_id;
			other.false_alarm_type_id = this.false_alarm_type_id;
			other.other_field_incident_type = this.other_field_incident_type;
			other.fecha_restablecer_alarma = this.fecha_restablecer_alarma;
			other.security_billing_scheme_id = this.security_billing_scheme_id;
			other.id_promocion_origen = this.id_promocion_origen;
			other.id_agrupacion_obra_nueva = this.id_agrupacion_obra_nueva;
			other.cp_section_id = this.cp_section_id;
			other.security_element_order_status_id = this.security_element_order_status_id;
			other.key_chain_id = this.key_chain_id;
			other.security_element_sub_status_id = this.security_element_sub_status_id;
			other.check_common_zone = this.check_common_zone;
			other.check_by_asset = this.check_by_asset;
			other.fail_cost = this.fail_cost;
			other.observation_fail = this.observation_fail;
			other.security_element_multiple_id = this.security_element_multiple_id;
			other.security_element_vigilance_type_id = this.security_element_vigilance_type_id;
			other.reason_reject_validation_hre = this.reason_reject_validation_hre;
			other.petitioner_cp_user_id = this.petitioner_cp_user_id;
			other.low_petitioner_cp_user_id = this.low_petitioner_cp_user_id;
			other.provider_cp_user_id = this.provider_cp_user_id;
			other.low_provider_cp_user_id = this.low_provider_cp_user_id;
			other.low_security_provider_id = this.low_security_provider_id;
			other.default_installation_cost = this.default_installation_cost;
			other.default_monthly_cost = this.default_monthly_cost;
			other.default_low_cost = this.default_low_cost;
			other.low_task_id = this.low_task_id;
			other.task_id = this.task_id;
			other.work_order_id = this.work_order_id;
			other.security_element_word_order_status_id = this.security_element_word_order_status_id;
			other.asset_occupation_report_id = this.asset_occupation_report_id;
			other.security_element_occupation_validation_status_id = this.security_element_occupation_validation_status_id;
			other.security_element_origin_id = this.security_element_origin_id;
			other.validation_date = this.validation_date;
			other.validation_cp_user_id = this.validation_cp_user_id;
			other.occupation_manager_cp_user_id = this.occupation_manager_cp_user_id;
			other.acuda_provider_id = this.acuda_provider_id;
			other.locksmith_provider_id = this.locksmith_provider_id;
			other.procedure_lawyer_id = this.procedure_lawyer_id;
			other.is_recoverable = this.is_recoverable;
			other.acuda_asset_technical_work_id = this.acuda_asset_technical_work_id;
			other.locksmith_asset_technical_work_id = this.locksmith_asset_technical_work_id;
			other.vigilance_security_element_id = this.vigilance_security_element_id;
			other.security_provider_asset_technical_work_id = this.security_provider_asset_technical_work_id;
			other.alarm_security_provider_id = this.alarm_security_provider_id;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRACION_CAJAMAR_Seguridad.length) {
					if (length < 1024 && commonByteArray_MIGRACION_CAJAMAR_Seguridad.length == 0) {
						commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[1024];
					} else {
						commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRACION_CAJAMAR_Seguridad, 0, length);
				strReturn = new String(commonByteArray_MIGRACION_CAJAMAR_Seguridad, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRACION_CAJAMAR_Seguridad.length) {
					if (length < 1024 && commonByteArray_MIGRACION_CAJAMAR_Seguridad.length == 0) {
						commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[1024];
					} else {
						commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MIGRACION_CAJAMAR_Seguridad, 0, length);
				strReturn = new String(commonByteArray_MIGRACION_CAJAMAR_Seguridad, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.asset_id = readInteger(dis);

					this.security_element_type_id = dis.readInt();

					this.created = readDate(dis);

					this.deleted = readDate(dis);

					this.modified = readDate(dis);

					this.security_provider_id = readInteger(dis);

					this.fecha_instalacion = readDate(dis);

					this.fecha_preparacion = readDate(dis);

					this.fecha_baja = readDate(dis);

					this.security_status_id = readInteger(dis);

					this.security_peticionario_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.coste_mensual = null;
					} else {
						this.coste_mensual = dis.readFloat();
					}

					this.data = readString(dis);

					this.haya_id = readInteger(dis);

					this.security_promotion_tipology_id = readInteger(dis);

					this.fecha_aceptacion = readDate(dis);

					this.incident_origin_id = readInteger(dis);

					this.fecha_aviso_incidencia = readDate(dis);

					this.incident_type_id = readInteger(dis);

					this.vandalized_item_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.peticion_acuda = null;
					} else {
						this.peticion_acuda = dis.readBoolean();
					}

					this.fecha_peticion_acuda = readDate(dis);

					this.fecha_presencia_acuda = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.peticion_cerrajero = null;
					} else {
						this.peticion_cerrajero = dis.readBoolean();
					}

					this.fecha_peticion_cerrajero = readDate(dis);

					this.fecha_presencia_cerrajero = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ocupado = null;
					} else {
						this.ocupado = dis.readBoolean();
					}

					this.fecha_ocupado = readDate(dis);

					this.observaciones_ocupado_si = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.restablecer_alarma = null;
					} else {
						this.restablecer_alarma = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.reparar_accesos = null;
					} else {
						this.reparar_accesos = dis.readBoolean();
					}

					this.observaciones_ocupado_no = readString(dis);

					this.occupation_reason_id = readInteger(dis);

					this.rep_file_ids = readString(dis);

					this.cp_user_id = readInteger(dis);

					this.other_field_incident_origin = readString(dis);

					this.provider_cra_id = readInteger(dis);

					this.false_alarm_type_id = readInteger(dis);

					this.other_field_incident_type = readString(dis);

					this.fecha_restablecer_alarma = readDate(dis);

					this.security_billing_scheme_id = readInteger(dis);

					this.id_promocion_origen = readString(dis);

					this.id_agrupacion_obra_nueva = readString(dis);

					this.cp_section_id = readInteger(dis);

					this.security_element_order_status_id = readInteger(dis);

					this.key_chain_id = readInteger(dis);

					this.security_element_sub_status_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.check_common_zone = null;
					} else {
						this.check_common_zone = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.check_by_asset = null;
					} else {
						this.check_by_asset = dis.readBoolean();
					}

					this.fail_cost = (BigDecimal) dis.readObject();

					this.observation_fail = readString(dis);

					this.security_element_multiple_id = readInteger(dis);

					this.security_element_vigilance_type_id = readInteger(dis);

					this.reason_reject_validation_hre = readString(dis);

					this.petitioner_cp_user_id = readInteger(dis);

					this.low_petitioner_cp_user_id = readInteger(dis);

					this.provider_cp_user_id = readInteger(dis);

					this.low_provider_cp_user_id = readInteger(dis);

					this.low_security_provider_id = readInteger(dis);

					this.default_installation_cost = (BigDecimal) dis.readObject();

					this.default_monthly_cost = (BigDecimal) dis.readObject();

					this.default_low_cost = (BigDecimal) dis.readObject();

					this.low_task_id = readString(dis);

					this.task_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.work_order_id = null;
					} else {
						this.work_order_id = dis.readLong();
					}

					this.security_element_word_order_status_id = readInteger(dis);

					this.asset_occupation_report_id = readInteger(dis);

					this.security_element_occupation_validation_status_id = readInteger(dis);

					this.security_element_origin_id = readInteger(dis);

					this.validation_date = readDate(dis);

					this.validation_cp_user_id = readInteger(dis);

					this.occupation_manager_cp_user_id = readInteger(dis);

					this.acuda_provider_id = readInteger(dis);

					this.locksmith_provider_id = readInteger(dis);

					this.procedure_lawyer_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_recoverable = null;
					} else {
						this.is_recoverable = dis.readByte();
					}

					length = dis.readByte();
					if (length == -1) {
						this.acuda_asset_technical_work_id = null;
					} else {
						this.acuda_asset_technical_work_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.locksmith_asset_technical_work_id = null;
					} else {
						this.locksmith_asset_technical_work_id = dis.readLong();
					}

					this.vigilance_security_element_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.security_provider_asset_technical_work_id = null;
					} else {
						this.security_provider_asset_technical_work_id = dis.readLong();
					}

					this.alarm_security_provider_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.asset_id = readInteger(dis);

					this.security_element_type_id = dis.readInt();

					this.created = readDate(dis);

					this.deleted = readDate(dis);

					this.modified = readDate(dis);

					this.security_provider_id = readInteger(dis);

					this.fecha_instalacion = readDate(dis);

					this.fecha_preparacion = readDate(dis);

					this.fecha_baja = readDate(dis);

					this.security_status_id = readInteger(dis);

					this.security_peticionario_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.coste_mensual = null;
					} else {
						this.coste_mensual = dis.readFloat();
					}

					this.data = readString(dis);

					this.haya_id = readInteger(dis);

					this.security_promotion_tipology_id = readInteger(dis);

					this.fecha_aceptacion = readDate(dis);

					this.incident_origin_id = readInteger(dis);

					this.fecha_aviso_incidencia = readDate(dis);

					this.incident_type_id = readInteger(dis);

					this.vandalized_item_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.peticion_acuda = null;
					} else {
						this.peticion_acuda = dis.readBoolean();
					}

					this.fecha_peticion_acuda = readDate(dis);

					this.fecha_presencia_acuda = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.peticion_cerrajero = null;
					} else {
						this.peticion_cerrajero = dis.readBoolean();
					}

					this.fecha_peticion_cerrajero = readDate(dis);

					this.fecha_presencia_cerrajero = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ocupado = null;
					} else {
						this.ocupado = dis.readBoolean();
					}

					this.fecha_ocupado = readDate(dis);

					this.observaciones_ocupado_si = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.restablecer_alarma = null;
					} else {
						this.restablecer_alarma = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.reparar_accesos = null;
					} else {
						this.reparar_accesos = dis.readBoolean();
					}

					this.observaciones_ocupado_no = readString(dis);

					this.occupation_reason_id = readInteger(dis);

					this.rep_file_ids = readString(dis);

					this.cp_user_id = readInteger(dis);

					this.other_field_incident_origin = readString(dis);

					this.provider_cra_id = readInteger(dis);

					this.false_alarm_type_id = readInteger(dis);

					this.other_field_incident_type = readString(dis);

					this.fecha_restablecer_alarma = readDate(dis);

					this.security_billing_scheme_id = readInteger(dis);

					this.id_promocion_origen = readString(dis);

					this.id_agrupacion_obra_nueva = readString(dis);

					this.cp_section_id = readInteger(dis);

					this.security_element_order_status_id = readInteger(dis);

					this.key_chain_id = readInteger(dis);

					this.security_element_sub_status_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.check_common_zone = null;
					} else {
						this.check_common_zone = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.check_by_asset = null;
					} else {
						this.check_by_asset = dis.readBoolean();
					}

					this.fail_cost = (BigDecimal) dis.readObject();

					this.observation_fail = readString(dis);

					this.security_element_multiple_id = readInteger(dis);

					this.security_element_vigilance_type_id = readInteger(dis);

					this.reason_reject_validation_hre = readString(dis);

					this.petitioner_cp_user_id = readInteger(dis);

					this.low_petitioner_cp_user_id = readInteger(dis);

					this.provider_cp_user_id = readInteger(dis);

					this.low_provider_cp_user_id = readInteger(dis);

					this.low_security_provider_id = readInteger(dis);

					this.default_installation_cost = (BigDecimal) dis.readObject();

					this.default_monthly_cost = (BigDecimal) dis.readObject();

					this.default_low_cost = (BigDecimal) dis.readObject();

					this.low_task_id = readString(dis);

					this.task_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.work_order_id = null;
					} else {
						this.work_order_id = dis.readLong();
					}

					this.security_element_word_order_status_id = readInteger(dis);

					this.asset_occupation_report_id = readInteger(dis);

					this.security_element_occupation_validation_status_id = readInteger(dis);

					this.security_element_origin_id = readInteger(dis);

					this.validation_date = readDate(dis);

					this.validation_cp_user_id = readInteger(dis);

					this.occupation_manager_cp_user_id = readInteger(dis);

					this.acuda_provider_id = readInteger(dis);

					this.locksmith_provider_id = readInteger(dis);

					this.procedure_lawyer_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_recoverable = null;
					} else {
						this.is_recoverable = dis.readByte();
					}

					length = dis.readByte();
					if (length == -1) {
						this.acuda_asset_technical_work_id = null;
					} else {
						this.acuda_asset_technical_work_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.locksmith_asset_technical_work_id = null;
					} else {
						this.locksmith_asset_technical_work_id = dis.readLong();
					}

					this.vigilance_security_element_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.security_provider_asset_technical_work_id = null;
					} else {
						this.security_provider_asset_technical_work_id = dis.readLong();
					}

					this.alarm_security_provider_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// Integer

				writeInteger(this.asset_id, dos);

				// int

				dos.writeInt(this.security_element_type_id);

				// java.util.Date

				writeDate(this.created, dos);

				// java.util.Date

				writeDate(this.deleted, dos);

				// java.util.Date

				writeDate(this.modified, dos);

				// Integer

				writeInteger(this.security_provider_id, dos);

				// java.util.Date

				writeDate(this.fecha_instalacion, dos);

				// java.util.Date

				writeDate(this.fecha_preparacion, dos);

				// java.util.Date

				writeDate(this.fecha_baja, dos);

				// Integer

				writeInteger(this.security_status_id, dos);

				// Integer

				writeInteger(this.security_peticionario_id, dos);

				// Float

				if (this.coste_mensual == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coste_mensual);
				}

				// String

				writeString(this.data, dos);

				// Integer

				writeInteger(this.haya_id, dos);

				// Integer

				writeInteger(this.security_promotion_tipology_id, dos);

				// java.util.Date

				writeDate(this.fecha_aceptacion, dos);

				// Integer

				writeInteger(this.incident_origin_id, dos);

				// java.util.Date

				writeDate(this.fecha_aviso_incidencia, dos);

				// Integer

				writeInteger(this.incident_type_id, dos);

				// Integer

				writeInteger(this.vandalized_item_id, dos);

				// Boolean

				if (this.peticion_acuda == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.peticion_acuda);
				}

				// java.util.Date

				writeDate(this.fecha_peticion_acuda, dos);

				// java.util.Date

				writeDate(this.fecha_presencia_acuda, dos);

				// Boolean

				if (this.peticion_cerrajero == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.peticion_cerrajero);
				}

				// java.util.Date

				writeDate(this.fecha_peticion_cerrajero, dos);

				// java.util.Date

				writeDate(this.fecha_presencia_cerrajero, dos);

				// Boolean

				if (this.ocupado == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ocupado);
				}

				// java.util.Date

				writeDate(this.fecha_ocupado, dos);

				// String

				writeString(this.observaciones_ocupado_si, dos);

				// Boolean

				if (this.restablecer_alarma == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.restablecer_alarma);
				}

				// Boolean

				if (this.reparar_accesos == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.reparar_accesos);
				}

				// String

				writeString(this.observaciones_ocupado_no, dos);

				// Integer

				writeInteger(this.occupation_reason_id, dos);

				// String

				writeString(this.rep_file_ids, dos);

				// Integer

				writeInteger(this.cp_user_id, dos);

				// String

				writeString(this.other_field_incident_origin, dos);

				// Integer

				writeInteger(this.provider_cra_id, dos);

				// Integer

				writeInteger(this.false_alarm_type_id, dos);

				// String

				writeString(this.other_field_incident_type, dos);

				// java.util.Date

				writeDate(this.fecha_restablecer_alarma, dos);

				// Integer

				writeInteger(this.security_billing_scheme_id, dos);

				// String

				writeString(this.id_promocion_origen, dos);

				// String

				writeString(this.id_agrupacion_obra_nueva, dos);

				// Integer

				writeInteger(this.cp_section_id, dos);

				// Integer

				writeInteger(this.security_element_order_status_id, dos);

				// Integer

				writeInteger(this.key_chain_id, dos);

				// Integer

				writeInteger(this.security_element_sub_status_id, dos);

				// Boolean

				if (this.check_common_zone == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.check_common_zone);
				}

				// Boolean

				if (this.check_by_asset == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.check_by_asset);
				}

				// BigDecimal

				dos.writeObject(this.fail_cost);

				// String

				writeString(this.observation_fail, dos);

				// Integer

				writeInteger(this.security_element_multiple_id, dos);

				// Integer

				writeInteger(this.security_element_vigilance_type_id, dos);

				// String

				writeString(this.reason_reject_validation_hre, dos);

				// Integer

				writeInteger(this.petitioner_cp_user_id, dos);

				// Integer

				writeInteger(this.low_petitioner_cp_user_id, dos);

				// Integer

				writeInteger(this.provider_cp_user_id, dos);

				// Integer

				writeInteger(this.low_provider_cp_user_id, dos);

				// Integer

				writeInteger(this.low_security_provider_id, dos);

				// BigDecimal

				dos.writeObject(this.default_installation_cost);

				// BigDecimal

				dos.writeObject(this.default_monthly_cost);

				// BigDecimal

				dos.writeObject(this.default_low_cost);

				// String

				writeString(this.low_task_id, dos);

				// String

				writeString(this.task_id, dos);

				// Long

				if (this.work_order_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.work_order_id);
				}

				// Integer

				writeInteger(this.security_element_word_order_status_id, dos);

				// Integer

				writeInteger(this.asset_occupation_report_id, dos);

				// Integer

				writeInteger(this.security_element_occupation_validation_status_id, dos);

				// Integer

				writeInteger(this.security_element_origin_id, dos);

				// java.util.Date

				writeDate(this.validation_date, dos);

				// Integer

				writeInteger(this.validation_cp_user_id, dos);

				// Integer

				writeInteger(this.occupation_manager_cp_user_id, dos);

				// Integer

				writeInteger(this.acuda_provider_id, dos);

				// Integer

				writeInteger(this.locksmith_provider_id, dos);

				// Integer

				writeInteger(this.procedure_lawyer_id, dos);

				// Byte

				if (this.is_recoverable == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeByte(this.is_recoverable);
				}

				// Long

				if (this.acuda_asset_technical_work_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.acuda_asset_technical_work_id);
				}

				// Long

				if (this.locksmith_asset_technical_work_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.locksmith_asset_technical_work_id);
				}

				// Integer

				writeInteger(this.vigilance_security_element_id, dos);

				// Long

				if (this.security_provider_asset_technical_work_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.security_provider_asset_technical_work_id);
				}

				// Integer

				writeInteger(this.alarm_security_provider_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// Integer

				writeInteger(this.asset_id, dos);

				// int

				dos.writeInt(this.security_element_type_id);

				// java.util.Date

				writeDate(this.created, dos);

				// java.util.Date

				writeDate(this.deleted, dos);

				// java.util.Date

				writeDate(this.modified, dos);

				// Integer

				writeInteger(this.security_provider_id, dos);

				// java.util.Date

				writeDate(this.fecha_instalacion, dos);

				// java.util.Date

				writeDate(this.fecha_preparacion, dos);

				// java.util.Date

				writeDate(this.fecha_baja, dos);

				// Integer

				writeInteger(this.security_status_id, dos);

				// Integer

				writeInteger(this.security_peticionario_id, dos);

				// Float

				if (this.coste_mensual == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.coste_mensual);
				}

				// String

				writeString(this.data, dos);

				// Integer

				writeInteger(this.haya_id, dos);

				// Integer

				writeInteger(this.security_promotion_tipology_id, dos);

				// java.util.Date

				writeDate(this.fecha_aceptacion, dos);

				// Integer

				writeInteger(this.incident_origin_id, dos);

				// java.util.Date

				writeDate(this.fecha_aviso_incidencia, dos);

				// Integer

				writeInteger(this.incident_type_id, dos);

				// Integer

				writeInteger(this.vandalized_item_id, dos);

				// Boolean

				if (this.peticion_acuda == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.peticion_acuda);
				}

				// java.util.Date

				writeDate(this.fecha_peticion_acuda, dos);

				// java.util.Date

				writeDate(this.fecha_presencia_acuda, dos);

				// Boolean

				if (this.peticion_cerrajero == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.peticion_cerrajero);
				}

				// java.util.Date

				writeDate(this.fecha_peticion_cerrajero, dos);

				// java.util.Date

				writeDate(this.fecha_presencia_cerrajero, dos);

				// Boolean

				if (this.ocupado == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ocupado);
				}

				// java.util.Date

				writeDate(this.fecha_ocupado, dos);

				// String

				writeString(this.observaciones_ocupado_si, dos);

				// Boolean

				if (this.restablecer_alarma == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.restablecer_alarma);
				}

				// Boolean

				if (this.reparar_accesos == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.reparar_accesos);
				}

				// String

				writeString(this.observaciones_ocupado_no, dos);

				// Integer

				writeInteger(this.occupation_reason_id, dos);

				// String

				writeString(this.rep_file_ids, dos);

				// Integer

				writeInteger(this.cp_user_id, dos);

				// String

				writeString(this.other_field_incident_origin, dos);

				// Integer

				writeInteger(this.provider_cra_id, dos);

				// Integer

				writeInteger(this.false_alarm_type_id, dos);

				// String

				writeString(this.other_field_incident_type, dos);

				// java.util.Date

				writeDate(this.fecha_restablecer_alarma, dos);

				// Integer

				writeInteger(this.security_billing_scheme_id, dos);

				// String

				writeString(this.id_promocion_origen, dos);

				// String

				writeString(this.id_agrupacion_obra_nueva, dos);

				// Integer

				writeInteger(this.cp_section_id, dos);

				// Integer

				writeInteger(this.security_element_order_status_id, dos);

				// Integer

				writeInteger(this.key_chain_id, dos);

				// Integer

				writeInteger(this.security_element_sub_status_id, dos);

				// Boolean

				if (this.check_common_zone == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.check_common_zone);
				}

				// Boolean

				if (this.check_by_asset == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.check_by_asset);
				}

				// BigDecimal

				dos.writeObject(this.fail_cost);

				// String

				writeString(this.observation_fail, dos);

				// Integer

				writeInteger(this.security_element_multiple_id, dos);

				// Integer

				writeInteger(this.security_element_vigilance_type_id, dos);

				// String

				writeString(this.reason_reject_validation_hre, dos);

				// Integer

				writeInteger(this.petitioner_cp_user_id, dos);

				// Integer

				writeInteger(this.low_petitioner_cp_user_id, dos);

				// Integer

				writeInteger(this.provider_cp_user_id, dos);

				// Integer

				writeInteger(this.low_provider_cp_user_id, dos);

				// Integer

				writeInteger(this.low_security_provider_id, dos);

				// BigDecimal

				dos.writeObject(this.default_installation_cost);

				// BigDecimal

				dos.writeObject(this.default_monthly_cost);

				// BigDecimal

				dos.writeObject(this.default_low_cost);

				// String

				writeString(this.low_task_id, dos);

				// String

				writeString(this.task_id, dos);

				// Long

				if (this.work_order_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.work_order_id);
				}

				// Integer

				writeInteger(this.security_element_word_order_status_id, dos);

				// Integer

				writeInteger(this.asset_occupation_report_id, dos);

				// Integer

				writeInteger(this.security_element_occupation_validation_status_id, dos);

				// Integer

				writeInteger(this.security_element_origin_id, dos);

				// java.util.Date

				writeDate(this.validation_date, dos);

				// Integer

				writeInteger(this.validation_cp_user_id, dos);

				// Integer

				writeInteger(this.occupation_manager_cp_user_id, dos);

				// Integer

				writeInteger(this.acuda_provider_id, dos);

				// Integer

				writeInteger(this.locksmith_provider_id, dos);

				// Integer

				writeInteger(this.procedure_lawyer_id, dos);

				// Byte

				if (this.is_recoverable == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeByte(this.is_recoverable);
				}

				// Long

				if (this.acuda_asset_technical_work_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.acuda_asset_technical_work_id);
				}

				// Long

				if (this.locksmith_asset_technical_work_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.locksmith_asset_technical_work_id);
				}

				// Integer

				writeInteger(this.vigilance_security_element_id, dos);

				// Long

				if (this.security_provider_asset_technical_work_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.security_provider_asset_technical_work_id);
				}

				// Integer

				writeInteger(this.alarm_security_provider_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",asset_id=" + String.valueOf(asset_id));
			sb.append(",security_element_type_id=" + String.valueOf(security_element_type_id));
			sb.append(",created=" + String.valueOf(created));
			sb.append(",deleted=" + String.valueOf(deleted));
			sb.append(",modified=" + String.valueOf(modified));
			sb.append(",security_provider_id=" + String.valueOf(security_provider_id));
			sb.append(",fecha_instalacion=" + String.valueOf(fecha_instalacion));
			sb.append(",fecha_preparacion=" + String.valueOf(fecha_preparacion));
			sb.append(",fecha_baja=" + String.valueOf(fecha_baja));
			sb.append(",security_status_id=" + String.valueOf(security_status_id));
			sb.append(",security_peticionario_id=" + String.valueOf(security_peticionario_id));
			sb.append(",coste_mensual=" + String.valueOf(coste_mensual));
			sb.append(",data=" + data);
			sb.append(",haya_id=" + String.valueOf(haya_id));
			sb.append(",security_promotion_tipology_id=" + String.valueOf(security_promotion_tipology_id));
			sb.append(",fecha_aceptacion=" + String.valueOf(fecha_aceptacion));
			sb.append(",incident_origin_id=" + String.valueOf(incident_origin_id));
			sb.append(",fecha_aviso_incidencia=" + String.valueOf(fecha_aviso_incidencia));
			sb.append(",incident_type_id=" + String.valueOf(incident_type_id));
			sb.append(",vandalized_item_id=" + String.valueOf(vandalized_item_id));
			sb.append(",peticion_acuda=" + String.valueOf(peticion_acuda));
			sb.append(",fecha_peticion_acuda=" + String.valueOf(fecha_peticion_acuda));
			sb.append(",fecha_presencia_acuda=" + String.valueOf(fecha_presencia_acuda));
			sb.append(",peticion_cerrajero=" + String.valueOf(peticion_cerrajero));
			sb.append(",fecha_peticion_cerrajero=" + String.valueOf(fecha_peticion_cerrajero));
			sb.append(",fecha_presencia_cerrajero=" + String.valueOf(fecha_presencia_cerrajero));
			sb.append(",ocupado=" + String.valueOf(ocupado));
			sb.append(",fecha_ocupado=" + String.valueOf(fecha_ocupado));
			sb.append(",observaciones_ocupado_si=" + observaciones_ocupado_si);
			sb.append(",restablecer_alarma=" + String.valueOf(restablecer_alarma));
			sb.append(",reparar_accesos=" + String.valueOf(reparar_accesos));
			sb.append(",observaciones_ocupado_no=" + observaciones_ocupado_no);
			sb.append(",occupation_reason_id=" + String.valueOf(occupation_reason_id));
			sb.append(",rep_file_ids=" + rep_file_ids);
			sb.append(",cp_user_id=" + String.valueOf(cp_user_id));
			sb.append(",other_field_incident_origin=" + other_field_incident_origin);
			sb.append(",provider_cra_id=" + String.valueOf(provider_cra_id));
			sb.append(",false_alarm_type_id=" + String.valueOf(false_alarm_type_id));
			sb.append(",other_field_incident_type=" + other_field_incident_type);
			sb.append(",fecha_restablecer_alarma=" + String.valueOf(fecha_restablecer_alarma));
			sb.append(",security_billing_scheme_id=" + String.valueOf(security_billing_scheme_id));
			sb.append(",id_promocion_origen=" + id_promocion_origen);
			sb.append(",id_agrupacion_obra_nueva=" + id_agrupacion_obra_nueva);
			sb.append(",cp_section_id=" + String.valueOf(cp_section_id));
			sb.append(",security_element_order_status_id=" + String.valueOf(security_element_order_status_id));
			sb.append(",key_chain_id=" + String.valueOf(key_chain_id));
			sb.append(",security_element_sub_status_id=" + String.valueOf(security_element_sub_status_id));
			sb.append(",check_common_zone=" + String.valueOf(check_common_zone));
			sb.append(",check_by_asset=" + String.valueOf(check_by_asset));
			sb.append(",fail_cost=" + String.valueOf(fail_cost));
			sb.append(",observation_fail=" + observation_fail);
			sb.append(",security_element_multiple_id=" + String.valueOf(security_element_multiple_id));
			sb.append(",security_element_vigilance_type_id=" + String.valueOf(security_element_vigilance_type_id));
			sb.append(",reason_reject_validation_hre=" + reason_reject_validation_hre);
			sb.append(",petitioner_cp_user_id=" + String.valueOf(petitioner_cp_user_id));
			sb.append(",low_petitioner_cp_user_id=" + String.valueOf(low_petitioner_cp_user_id));
			sb.append(",provider_cp_user_id=" + String.valueOf(provider_cp_user_id));
			sb.append(",low_provider_cp_user_id=" + String.valueOf(low_provider_cp_user_id));
			sb.append(",low_security_provider_id=" + String.valueOf(low_security_provider_id));
			sb.append(",default_installation_cost=" + String.valueOf(default_installation_cost));
			sb.append(",default_monthly_cost=" + String.valueOf(default_monthly_cost));
			sb.append(",default_low_cost=" + String.valueOf(default_low_cost));
			sb.append(",low_task_id=" + low_task_id);
			sb.append(",task_id=" + task_id);
			sb.append(",work_order_id=" + String.valueOf(work_order_id));
			sb.append(
					",security_element_word_order_status_id=" + String.valueOf(security_element_word_order_status_id));
			sb.append(",asset_occupation_report_id=" + String.valueOf(asset_occupation_report_id));
			sb.append(",security_element_occupation_validation_status_id="
					+ String.valueOf(security_element_occupation_validation_status_id));
			sb.append(",security_element_origin_id=" + String.valueOf(security_element_origin_id));
			sb.append(",validation_date=" + String.valueOf(validation_date));
			sb.append(",validation_cp_user_id=" + String.valueOf(validation_cp_user_id));
			sb.append(",occupation_manager_cp_user_id=" + String.valueOf(occupation_manager_cp_user_id));
			sb.append(",acuda_provider_id=" + String.valueOf(acuda_provider_id));
			sb.append(",locksmith_provider_id=" + String.valueOf(locksmith_provider_id));
			sb.append(",procedure_lawyer_id=" + String.valueOf(procedure_lawyer_id));
			sb.append(",is_recoverable=" + String.valueOf(is_recoverable));
			sb.append(",acuda_asset_technical_work_id=" + String.valueOf(acuda_asset_technical_work_id));
			sb.append(",locksmith_asset_technical_work_id=" + String.valueOf(locksmith_asset_technical_work_id));
			sb.append(",vigilance_security_element_id=" + String.valueOf(vigilance_security_element_id));
			sb.append(",security_provider_asset_technical_work_id="
					+ String.valueOf(security_provider_asset_technical_work_id));
			sb.append(",alarm_security_provider_id=" + String.valueOf(alarm_security_provider_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "security_element";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				int count_tDBOutput_1 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables("db_cajamar", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_1 = false;
				while (rsTable_tDBOutput_1.next()) {
					String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
					if (table_tDBOutput_1.equalsIgnoreCase("security_element")) {
						whetherExist_tDBOutput_1 = true;
						break;
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE `" + tableName_tDBOutput_1 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1
							+ "`(`id` INT(10)   not null ,`asset_id` INT(10)  ,`security_element_type_id` INT(10)   not null ,`created` DATETIME default CURRENT_TIMESTAMP  not null ,`deleted` DATETIME ,`modified` DATETIME default CURRENT_TIMESTAMP  not null ,`security_provider_id` INT(10)  ,`fecha_instalacion` DATETIME ,`fecha_preparacion` DATETIME ,`fecha_baja` DATETIME ,`security_status_id` INT(10)  ,`security_peticionario_id` INT(10)  ,`coste_mensual` FLOAT(12,0)  ,`data` TEXT ,`haya_id` INT(10)  ,`security_promotion_tipology_id` INT(10)  ,`fecha_aceptacion` DATETIME ,`incident_origin_id` INT(10)  ,`fecha_aviso_incidencia` DATETIME ,`incident_type_id` INT(10)  ,`vandalized_item_id` INT(10)  ,`peticion_acuda` BIT(1)  ,`fecha_peticion_acuda` DATETIME ,`fecha_presencia_acuda` DATETIME ,`peticion_cerrajero` BIT(1)  ,`fecha_peticion_cerrajero` DATETIME ,`fecha_presencia_cerrajero` DATETIME ,`ocupado` BIT(1)  ,`fecha_ocupado` DATETIME ,`observaciones_ocupado_si` VARCHAR(255)  ,`restablecer_alarma` BIT(1)  ,`reparar_accesos` BIT(1)  ,`observaciones_ocupado_no` VARCHAR(255)  ,`occupation_reason_id` INT(10)  ,`rep_file_ids` TEXT ,`cp_user_id` INT(10)  ,`other_field_incident_origin` VARCHAR(255)  ,`provider_cra_id` INT(10)  ,`false_alarm_type_id` INT(10)  ,`other_field_incident_type` VARCHAR(255)  ,`fecha_restablecer_alarma` DATETIME ,`security_billing_scheme_id` INT(10)  ,`id_promocion_origen` VARCHAR(20)  ,`id_agrupacion_obra_nueva` VARCHAR(20)  ,`cp_section_id` INT(10)  ,`security_element_order_status_id` INT(10)  ,`key_chain_id` INT(10)  ,`security_element_sub_status_id` INT(10)  ,`check_common_zone` BIT(1)  ,`check_by_asset` BIT(1)  ,`fail_cost` DECIMAL(10,2)  ,`observation_fail` VARCHAR(255)  ,`security_element_multiple_id` INT(10)  ,`security_element_vigilance_type_id` INT(10)  ,`reason_reject_validation_hre` VARCHAR(255)  ,`petitioner_cp_user_id` INT(10)  ,`low_petitioner_cp_user_id` INT(10)  ,`provider_cp_user_id` INT(10)  ,`low_provider_cp_user_id` INT(10)  ,`low_security_provider_id` INT(10)  ,`default_installation_cost` DECIMAL(10,2)  ,`default_monthly_cost` DECIMAL(10,2)  ,`default_low_cost` DECIMAL(10,2)  ,`low_task_id` VARCHAR(255)  ,`task_id` VARCHAR(255)  ,`work_order_id` BIGINT(19)  ,`security_element_word_order_status_id` INT(10)  ,`asset_occupation_report_id` INT(10)  ,`security_element_occupation_validation_status_id` INT(10)  ,`security_element_origin_id` INT(10)  ,`validation_date` DATETIME ,`validation_cp_user_id` INT(10)  ,`occupation_manager_cp_user_id` INT(10)  ,`acuda_provider_id` INT(10)  ,`locksmith_provider_id` INT(10)  ,`procedure_lawyer_id` INT(10)  ,`is_recoverable` TINYINT(3)  ,`acuda_asset_technical_work_id` BIGINT(19)  ,`locksmith_asset_technical_work_id` BIGINT(19)  ,`vigilance_security_element_id` INT(10)  ,`security_provider_asset_technical_work_id` BIGINT(19)  ,`alarm_security_provider_id` INT(10)  ,primary key(`id`))");
				}

				String insert_tDBOutput_1 = "INSERT INTO `" + "security_element"
						+ "` (`id`,`asset_id`,`security_element_type_id`,`created`,`deleted`,`modified`,`security_provider_id`,`fecha_instalacion`,`fecha_preparacion`,`fecha_baja`,`security_status_id`,`security_peticionario_id`,`coste_mensual`,`data`,`haya_id`,`security_promotion_tipology_id`,`fecha_aceptacion`,`incident_origin_id`,`fecha_aviso_incidencia`,`incident_type_id`,`vandalized_item_id`,`peticion_acuda`,`fecha_peticion_acuda`,`fecha_presencia_acuda`,`peticion_cerrajero`,`fecha_peticion_cerrajero`,`fecha_presencia_cerrajero`,`ocupado`,`fecha_ocupado`,`observaciones_ocupado_si`,`restablecer_alarma`,`reparar_accesos`,`observaciones_ocupado_no`,`occupation_reason_id`,`rep_file_ids`,`cp_user_id`,`other_field_incident_origin`,`provider_cra_id`,`false_alarm_type_id`,`other_field_incident_type`,`fecha_restablecer_alarma`,`security_billing_scheme_id`,`id_promocion_origen`,`id_agrupacion_obra_nueva`,`cp_section_id`,`security_element_order_status_id`,`key_chain_id`,`security_element_sub_status_id`,`check_common_zone`,`check_by_asset`,`fail_cost`,`observation_fail`,`security_element_multiple_id`,`security_element_vigilance_type_id`,`reason_reject_validation_hre`,`petitioner_cp_user_id`,`low_petitioner_cp_user_id`,`provider_cp_user_id`,`low_provider_cp_user_id`,`low_security_provider_id`,`default_installation_cost`,`default_monthly_cost`,`default_low_cost`,`low_task_id`,`task_id`,`work_order_id`,`security_element_word_order_status_id`,`asset_occupation_report_id`,`security_element_occupation_validation_status_id`,`security_element_origin_id`,`validation_date`,`validation_cp_user_id`,`occupation_manager_cp_user_id`,`acuda_provider_id`,`locksmith_provider_id`,`procedure_lawyer_id`,`is_recoverable`,`acuda_asset_technical_work_id`,`locksmith_asset_technical_work_id`,`vigilance_security_element_id`,`security_provider_asset_technical_work_id`,`alarm_security_provider_id`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  `security_element`.`id`, \n  `security_element`.`asset_id`, \n  `security_element`.`security_element_type_id`, "
						+ "\n  `security_element`.`created`, \n  `security_element`.`deleted`, \n  `security_element`.`modified`, \n  `security_element"
						+ "`.`security_provider_id`, \n REPLACE(`security_element`.`fecha_instalacion`, '0000-00-00 00:00:00', NULL), \n  `security_"
						+ "element`.`fecha_preparacion`, \n REPLACE(`security_element`.`fecha_baja`, '0000-00-00 00:00:00', NULL), \n  `security_ele"
						+ "ment`.`security_status_id`, \n  `security_element`.`security_peticionario_id`, \n  `security_element`.`coste_mensual`, \n  "
						+ "`security_element`.`data`, \n  `security_element`.`haya_id`, \n  `security_element`.`security_promotion_tipology_id`, \n  `"
						+ "security_element`.`fecha_aceptacion`, \n  `security_element`.`incident_origin_id`, \n  `security_element`.`fecha_aviso_inc"
						+ "idencia`, \n  `security_element`.`incident_type_id`, \n  `security_element`.`vandalized_item_id`, \n  `security_element`.`p"
						+ "eticion_acuda`, \n  `security_element`.`fecha_peticion_acuda`, \n  `security_element`.`fecha_presencia_acuda`, \n  `securit"
						+ "y_element`.`peticion_cerrajero`, \n  `security_element`.`fecha_peticion_cerrajero`, \n  `security_element`.`fecha_presenci"
						+ "a_cerrajero`, \n  `security_element`.`ocupado`, \n  `security_element`.`fecha_ocupado`, \n  `security_element`.`observacion"
						+ "es_ocupado_si`, \n  `security_element`.`restablecer_alarma`, \n  `security_element`.`reparar_accesos`, \n  `security_elemen"
						+ "t`.`observaciones_ocupado_no`, \n  `security_element`.`occupation_reason_id`, \n  `security_element`.`rep_file_ids`, \n  `s"
						+ "ecurity_element`.`cp_user_id`, \n  `security_element`.`other_field_incident_origin`, \n  `security_element`.`provider_cra_"
						+ "id`, \n  `security_element`.`false_alarm_type_id`, \n  `security_element`.`other_field_incident_type`, \n  `security_elemen"
						+ "t`.`fecha_restablecer_alarma`, \n  `security_element`.`security_billing_scheme_id`, \n  `security_element`.`id_promocion_o"
						+ "rigen`, \n  `security_element`.`id_agrupacion_obra_nueva`, \n  `security_element`.`cp_section_id`, \n  `security_element`.`"
						+ "security_element_order_status_id`, \n  `security_element`.`key_chain_id`, \n  `security_element`.`security_element_sub_sta"
						+ "tus_id`, \n  `security_element`.`check_common_zone`, \n  `security_element`.`check_by_asset`, \n  `security_element`.`fail_"
						+ "cost`, \n  `security_element`.`observation_fail`, \n  `security_element`.`security_element_multiple_id`, \n  `security_elem"
						+ "ent`.`security_element_vigilance_type_id`, \n  `security_element`.`reason_reject_validation_hre`, \n  `security_element`.`"
						+ "petitioner_cp_user_id`, \n  `security_element`.`low_petitioner_cp_user_id`, \n  `security_element`.`provider_cp_user_id`, "
						+ "\n  `security_element`.`low_provider_cp_user_id`, \n  `security_element`.`low_security_provider_id`, \n  `security_element`"
						+ ".`default_installation_cost`, \n  `security_element`.`default_monthly_cost`, \n  `security_element`.`default_low_cost`, \n "
						+ " `security_element`.`low_task_id`, \n  `security_element`.`task_id`, \n  `security_element`.`work_order_id`, \n  `security_"
						+ "element`.`security_element_word_order_status_id`, \n  `security_element`.`asset_occupation_report_id`, \n  `security_eleme"
						+ "nt`.`security_element_occupation_validation_status_id`, \n  `security_element`.`security_element_origin_id`, \n  `security"
						+ "_element`.`validation_date`, \n  `security_element`.`validation_cp_user_id`, \n  `security_element`.`occupation_manager_cp"
						+ "_user_id`, \n  `security_element`.`acuda_provider_id`, \n  `security_element`.`locksmith_provider_id`, \n  `security_elemen"
						+ "t`.`procedure_lawyer_id`, \n  `security_element`.`is_recoverable`, \n  `security_element`.`acuda_asset_technical_work_id`,"
						+ " \n  `security_element`.`locksmith_asset_technical_work_id`, \n  `security_element`.`vigilance_security_element_id`, \n  `s"
						+ "ecurity_element`.`security_provider_asset_technical_work_id`, \n  `security_element`.`alarm_security_provider_id`\nFROM `s"
						+ "ecurity_element`\nINNER JOIN asset a  on `security_element`.asset_id = a.id \nWHERE a.de_entidad_cliente = 'CAJAMAR'";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.id = 0;
						} else {

							row1.id = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.asset_id = null;
						} else {

							row1.asset_id = rs_tDBInput_1.getInt(2);
							if (rs_tDBInput_1.wasNull()) {
								row1.asset_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.security_element_type_id = 0;
						} else {

							row1.security_element_type_id = rs_tDBInput_1.getInt(3);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.created = null;
						} else {

							if (rs_tDBInput_1.getString(4) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(4);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.created = rs_tDBInput_1.getTimestamp(4);
								} else {
									row1.created = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.created = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.deleted = null;
						} else {

							if (rs_tDBInput_1.getString(5) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(5);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.deleted = rs_tDBInput_1.getTimestamp(5);
								} else {
									row1.deleted = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.deleted = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.modified = null;
						} else {

							if (rs_tDBInput_1.getString(6) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(6);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.modified = rs_tDBInput_1.getTimestamp(6);
								} else {
									row1.modified = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.modified = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.security_provider_id = null;
						} else {

							row1.security_provider_id = rs_tDBInput_1.getInt(7);
							if (rs_tDBInput_1.wasNull()) {
								row1.security_provider_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.fecha_instalacion = null;
						} else {

							if (rs_tDBInput_1.getString(8) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(8);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.fecha_instalacion = rs_tDBInput_1.getTimestamp(8);
								} else {
									row1.fecha_instalacion = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.fecha_instalacion = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.fecha_preparacion = null;
						} else {

							if (rs_tDBInput_1.getString(9) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(9);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.fecha_preparacion = rs_tDBInput_1.getTimestamp(9);
								} else {
									row1.fecha_preparacion = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.fecha_preparacion = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.fecha_baja = null;
						} else {

							if (rs_tDBInput_1.getString(10) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(10);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.fecha_baja = rs_tDBInput_1.getTimestamp(10);
								} else {
									row1.fecha_baja = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.fecha_baja = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.security_status_id = null;
						} else {

							row1.security_status_id = rs_tDBInput_1.getInt(11);
							if (rs_tDBInput_1.wasNull()) {
								row1.security_status_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.security_peticionario_id = null;
						} else {

							row1.security_peticionario_id = rs_tDBInput_1.getInt(12);
							if (rs_tDBInput_1.wasNull()) {
								row1.security_peticionario_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.coste_mensual = null;
						} else {

							row1.coste_mensual = rs_tDBInput_1.getFloat(13);
							if (rs_tDBInput_1.wasNull()) {
								row1.coste_mensual = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.data = null;
						} else {

							row1.data = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.haya_id = null;
						} else {

							row1.haya_id = rs_tDBInput_1.getInt(15);
							if (rs_tDBInput_1.wasNull()) {
								row1.haya_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.security_promotion_tipology_id = null;
						} else {

							row1.security_promotion_tipology_id = rs_tDBInput_1.getInt(16);
							if (rs_tDBInput_1.wasNull()) {
								row1.security_promotion_tipology_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.fecha_aceptacion = null;
						} else {

							if (rs_tDBInput_1.getString(17) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(17);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.fecha_aceptacion = rs_tDBInput_1.getTimestamp(17);
								} else {
									row1.fecha_aceptacion = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.fecha_aceptacion = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.incident_origin_id = null;
						} else {

							row1.incident_origin_id = rs_tDBInput_1.getInt(18);
							if (rs_tDBInput_1.wasNull()) {
								row1.incident_origin_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.fecha_aviso_incidencia = null;
						} else {

							if (rs_tDBInput_1.getString(19) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(19);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.fecha_aviso_incidencia = rs_tDBInput_1.getTimestamp(19);
								} else {
									row1.fecha_aviso_incidencia = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.fecha_aviso_incidencia = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.incident_type_id = null;
						} else {

							row1.incident_type_id = rs_tDBInput_1.getInt(20);
							if (rs_tDBInput_1.wasNull()) {
								row1.incident_type_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.vandalized_item_id = null;
						} else {

							row1.vandalized_item_id = rs_tDBInput_1.getInt(21);
							if (rs_tDBInput_1.wasNull()) {
								row1.vandalized_item_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.peticion_acuda = null;
						} else {

							row1.peticion_acuda = rs_tDBInput_1.getBoolean(22);
							if (rs_tDBInput_1.wasNull()) {
								row1.peticion_acuda = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.fecha_peticion_acuda = null;
						} else {

							if (rs_tDBInput_1.getString(23) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(23);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.fecha_peticion_acuda = rs_tDBInput_1.getTimestamp(23);
								} else {
									row1.fecha_peticion_acuda = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.fecha_peticion_acuda = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.fecha_presencia_acuda = null;
						} else {

							if (rs_tDBInput_1.getString(24) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(24);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.fecha_presencia_acuda = rs_tDBInput_1.getTimestamp(24);
								} else {
									row1.fecha_presencia_acuda = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.fecha_presencia_acuda = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.peticion_cerrajero = null;
						} else {

							row1.peticion_cerrajero = rs_tDBInput_1.getBoolean(25);
							if (rs_tDBInput_1.wasNull()) {
								row1.peticion_cerrajero = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.fecha_peticion_cerrajero = null;
						} else {

							if (rs_tDBInput_1.getString(26) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(26);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.fecha_peticion_cerrajero = rs_tDBInput_1.getTimestamp(26);
								} else {
									row1.fecha_peticion_cerrajero = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.fecha_peticion_cerrajero = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.fecha_presencia_cerrajero = null;
						} else {

							if (rs_tDBInput_1.getString(27) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(27);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.fecha_presencia_cerrajero = rs_tDBInput_1.getTimestamp(27);
								} else {
									row1.fecha_presencia_cerrajero = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.fecha_presencia_cerrajero = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.ocupado = null;
						} else {

							row1.ocupado = rs_tDBInput_1.getBoolean(28);
							if (rs_tDBInput_1.wasNull()) {
								row1.ocupado = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.fecha_ocupado = null;
						} else {

							if (rs_tDBInput_1.getString(29) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(29);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.fecha_ocupado = rs_tDBInput_1.getTimestamp(29);
								} else {
									row1.fecha_ocupado = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.fecha_ocupado = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 30) {
							row1.observaciones_ocupado_si = null;
						} else {

							row1.observaciones_ocupado_si = routines.system.JDBCUtil.getString(rs_tDBInput_1, 30,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 31) {
							row1.restablecer_alarma = null;
						} else {

							row1.restablecer_alarma = rs_tDBInput_1.getBoolean(31);
							if (rs_tDBInput_1.wasNull()) {
								row1.restablecer_alarma = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 32) {
							row1.reparar_accesos = null;
						} else {

							row1.reparar_accesos = rs_tDBInput_1.getBoolean(32);
							if (rs_tDBInput_1.wasNull()) {
								row1.reparar_accesos = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 33) {
							row1.observaciones_ocupado_no = null;
						} else {

							row1.observaciones_ocupado_no = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 34) {
							row1.occupation_reason_id = null;
						} else {

							row1.occupation_reason_id = rs_tDBInput_1.getInt(34);
							if (rs_tDBInput_1.wasNull()) {
								row1.occupation_reason_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 35) {
							row1.rep_file_ids = null;
						} else {

							row1.rep_file_ids = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, false);
						}
						if (colQtyInRs_tDBInput_1 < 36) {
							row1.cp_user_id = null;
						} else {

							row1.cp_user_id = rs_tDBInput_1.getInt(36);
							if (rs_tDBInput_1.wasNull()) {
								row1.cp_user_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 37) {
							row1.other_field_incident_origin = null;
						} else {

							row1.other_field_incident_origin = routines.system.JDBCUtil.getString(rs_tDBInput_1, 37,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 38) {
							row1.provider_cra_id = null;
						} else {

							row1.provider_cra_id = rs_tDBInput_1.getInt(38);
							if (rs_tDBInput_1.wasNull()) {
								row1.provider_cra_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 39) {
							row1.false_alarm_type_id = null;
						} else {

							row1.false_alarm_type_id = rs_tDBInput_1.getInt(39);
							if (rs_tDBInput_1.wasNull()) {
								row1.false_alarm_type_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 40) {
							row1.other_field_incident_type = null;
						} else {

							row1.other_field_incident_type = routines.system.JDBCUtil.getString(rs_tDBInput_1, 40,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 41) {
							row1.fecha_restablecer_alarma = null;
						} else {

							if (rs_tDBInput_1.getString(41) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(41);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.fecha_restablecer_alarma = rs_tDBInput_1.getTimestamp(41);
								} else {
									row1.fecha_restablecer_alarma = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.fecha_restablecer_alarma = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 42) {
							row1.security_billing_scheme_id = null;
						} else {

							row1.security_billing_scheme_id = rs_tDBInput_1.getInt(42);
							if (rs_tDBInput_1.wasNull()) {
								row1.security_billing_scheme_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 43) {
							row1.id_promocion_origen = null;
						} else {

							row1.id_promocion_origen = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, false);
						}
						if (colQtyInRs_tDBInput_1 < 44) {
							row1.id_agrupacion_obra_nueva = null;
						} else {

							row1.id_agrupacion_obra_nueva = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 45) {
							row1.cp_section_id = null;
						} else {

							row1.cp_section_id = rs_tDBInput_1.getInt(45);
							if (rs_tDBInput_1.wasNull()) {
								row1.cp_section_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 46) {
							row1.security_element_order_status_id = null;
						} else {

							row1.security_element_order_status_id = rs_tDBInput_1.getInt(46);
							if (rs_tDBInput_1.wasNull()) {
								row1.security_element_order_status_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 47) {
							row1.key_chain_id = null;
						} else {

							row1.key_chain_id = rs_tDBInput_1.getInt(47);
							if (rs_tDBInput_1.wasNull()) {
								row1.key_chain_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 48) {
							row1.security_element_sub_status_id = null;
						} else {

							row1.security_element_sub_status_id = rs_tDBInput_1.getInt(48);
							if (rs_tDBInput_1.wasNull()) {
								row1.security_element_sub_status_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 49) {
							row1.check_common_zone = null;
						} else {

							row1.check_common_zone = rs_tDBInput_1.getBoolean(49);
							if (rs_tDBInput_1.wasNull()) {
								row1.check_common_zone = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 50) {
							row1.check_by_asset = null;
						} else {

							row1.check_by_asset = rs_tDBInput_1.getBoolean(50);
							if (rs_tDBInput_1.wasNull()) {
								row1.check_by_asset = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 51) {
							row1.fail_cost = null;
						} else {

							row1.fail_cost = rs_tDBInput_1.getBigDecimal(51);
							if (rs_tDBInput_1.wasNull()) {
								row1.fail_cost = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 52) {
							row1.observation_fail = null;
						} else {

							row1.observation_fail = routines.system.JDBCUtil.getString(rs_tDBInput_1, 52, false);
						}
						if (colQtyInRs_tDBInput_1 < 53) {
							row1.security_element_multiple_id = null;
						} else {

							row1.security_element_multiple_id = rs_tDBInput_1.getInt(53);
							if (rs_tDBInput_1.wasNull()) {
								row1.security_element_multiple_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 54) {
							row1.security_element_vigilance_type_id = null;
						} else {

							row1.security_element_vigilance_type_id = rs_tDBInput_1.getInt(54);
							if (rs_tDBInput_1.wasNull()) {
								row1.security_element_vigilance_type_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 55) {
							row1.reason_reject_validation_hre = null;
						} else {

							row1.reason_reject_validation_hre = routines.system.JDBCUtil.getString(rs_tDBInput_1, 55,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 56) {
							row1.petitioner_cp_user_id = null;
						} else {

							row1.petitioner_cp_user_id = rs_tDBInput_1.getInt(56);
							if (rs_tDBInput_1.wasNull()) {
								row1.petitioner_cp_user_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 57) {
							row1.low_petitioner_cp_user_id = null;
						} else {

							row1.low_petitioner_cp_user_id = rs_tDBInput_1.getInt(57);
							if (rs_tDBInput_1.wasNull()) {
								row1.low_petitioner_cp_user_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 58) {
							row1.provider_cp_user_id = null;
						} else {

							row1.provider_cp_user_id = rs_tDBInput_1.getInt(58);
							if (rs_tDBInput_1.wasNull()) {
								row1.provider_cp_user_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 59) {
							row1.low_provider_cp_user_id = null;
						} else {

							row1.low_provider_cp_user_id = rs_tDBInput_1.getInt(59);
							if (rs_tDBInput_1.wasNull()) {
								row1.low_provider_cp_user_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 60) {
							row1.low_security_provider_id = null;
						} else {

							row1.low_security_provider_id = rs_tDBInput_1.getInt(60);
							if (rs_tDBInput_1.wasNull()) {
								row1.low_security_provider_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 61) {
							row1.default_installation_cost = null;
						} else {

							row1.default_installation_cost = rs_tDBInput_1.getBigDecimal(61);
							if (rs_tDBInput_1.wasNull()) {
								row1.default_installation_cost = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 62) {
							row1.default_monthly_cost = null;
						} else {

							row1.default_monthly_cost = rs_tDBInput_1.getBigDecimal(62);
							if (rs_tDBInput_1.wasNull()) {
								row1.default_monthly_cost = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 63) {
							row1.default_low_cost = null;
						} else {

							row1.default_low_cost = rs_tDBInput_1.getBigDecimal(63);
							if (rs_tDBInput_1.wasNull()) {
								row1.default_low_cost = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 64) {
							row1.low_task_id = null;
						} else {

							row1.low_task_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 64, false);
						}
						if (colQtyInRs_tDBInput_1 < 65) {
							row1.task_id = null;
						} else {

							row1.task_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 65, false);
						}
						if (colQtyInRs_tDBInput_1 < 66) {
							row1.work_order_id = null;
						} else {

							row1.work_order_id = rs_tDBInput_1.getLong(66);
							if (rs_tDBInput_1.wasNull()) {
								row1.work_order_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 67) {
							row1.security_element_word_order_status_id = null;
						} else {

							row1.security_element_word_order_status_id = rs_tDBInput_1.getInt(67);
							if (rs_tDBInput_1.wasNull()) {
								row1.security_element_word_order_status_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 68) {
							row1.asset_occupation_report_id = null;
						} else {

							row1.asset_occupation_report_id = rs_tDBInput_1.getInt(68);
							if (rs_tDBInput_1.wasNull()) {
								row1.asset_occupation_report_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 69) {
							row1.security_element_occupation_validation_status_id = null;
						} else {

							row1.security_element_occupation_validation_status_id = rs_tDBInput_1.getInt(69);
							if (rs_tDBInput_1.wasNull()) {
								row1.security_element_occupation_validation_status_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 70) {
							row1.security_element_origin_id = null;
						} else {

							row1.security_element_origin_id = rs_tDBInput_1.getInt(70);
							if (rs_tDBInput_1.wasNull()) {
								row1.security_element_origin_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 71) {
							row1.validation_date = null;
						} else {

							if (rs_tDBInput_1.getString(71) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(71);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.validation_date = rs_tDBInput_1.getTimestamp(71);
								} else {
									row1.validation_date = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.validation_date = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 72) {
							row1.validation_cp_user_id = null;
						} else {

							row1.validation_cp_user_id = rs_tDBInput_1.getInt(72);
							if (rs_tDBInput_1.wasNull()) {
								row1.validation_cp_user_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 73) {
							row1.occupation_manager_cp_user_id = null;
						} else {

							row1.occupation_manager_cp_user_id = rs_tDBInput_1.getInt(73);
							if (rs_tDBInput_1.wasNull()) {
								row1.occupation_manager_cp_user_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 74) {
							row1.acuda_provider_id = null;
						} else {

							row1.acuda_provider_id = rs_tDBInput_1.getInt(74);
							if (rs_tDBInput_1.wasNull()) {
								row1.acuda_provider_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 75) {
							row1.locksmith_provider_id = null;
						} else {

							row1.locksmith_provider_id = rs_tDBInput_1.getInt(75);
							if (rs_tDBInput_1.wasNull()) {
								row1.locksmith_provider_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 76) {
							row1.procedure_lawyer_id = null;
						} else {

							row1.procedure_lawyer_id = rs_tDBInput_1.getInt(76);
							if (rs_tDBInput_1.wasNull()) {
								row1.procedure_lawyer_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 77) {
							row1.is_recoverable = null;
						} else {

							row1.is_recoverable = rs_tDBInput_1.getByte(77);
							if (rs_tDBInput_1.wasNull()) {
								row1.is_recoverable = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 78) {
							row1.acuda_asset_technical_work_id = null;
						} else {

							row1.acuda_asset_technical_work_id = rs_tDBInput_1.getLong(78);
							if (rs_tDBInput_1.wasNull()) {
								row1.acuda_asset_technical_work_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 79) {
							row1.locksmith_asset_technical_work_id = null;
						} else {

							row1.locksmith_asset_technical_work_id = rs_tDBInput_1.getLong(79);
							if (rs_tDBInput_1.wasNull()) {
								row1.locksmith_asset_technical_work_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 80) {
							row1.vigilance_security_element_id = null;
						} else {

							row1.vigilance_security_element_id = rs_tDBInput_1.getInt(80);
							if (rs_tDBInput_1.wasNull()) {
								row1.vigilance_security_element_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 81) {
							row1.security_provider_asset_technical_work_id = null;
						} else {

							row1.security_provider_asset_technical_work_id = rs_tDBInput_1.getLong(81);
							if (rs_tDBInput_1.wasNull()) {
								row1.security_provider_asset_technical_work_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 82) {
							row1.alarm_security_provider_id = null;
						} else {

							row1.alarm_security_provider_id = rs_tDBInput_1.getInt(82);
							if (rs_tDBInput_1.wasNull()) {
								row1.alarm_security_provider_id = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 main ] start
						 */

						currentComponent = "tDBOutput_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						whetherReject_tDBOutput_1 = false;
						pstmt_tDBOutput_1.setInt(1, row1.id);

						if (row1.asset_id == null) {
							pstmt_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(2, row1.asset_id);
						}

						pstmt_tDBOutput_1.setInt(3, row1.security_element_type_id);

						if (row1.created != null) {
							date_tDBOutput_1 = row1.created.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(4, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(4, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(4, java.sql.Types.DATE);
						}

						if (row1.deleted != null) {
							date_tDBOutput_1 = row1.deleted.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(5, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(5, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(5, java.sql.Types.DATE);
						}

						if (row1.modified != null) {
							date_tDBOutput_1 = row1.modified.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(6, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(6, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(6, java.sql.Types.DATE);
						}

						if (row1.security_provider_id == null) {
							pstmt_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(7, row1.security_provider_id);
						}

						if (row1.fecha_instalacion != null) {
							date_tDBOutput_1 = row1.fecha_instalacion.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(8, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(8, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(8, java.sql.Types.DATE);
						}

						if (row1.fecha_preparacion != null) {
							date_tDBOutput_1 = row1.fecha_preparacion.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(9, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(9, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(9, java.sql.Types.DATE);
						}

						if (row1.fecha_baja != null) {
							date_tDBOutput_1 = row1.fecha_baja.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(10, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(10, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(10, java.sql.Types.DATE);
						}

						if (row1.security_status_id == null) {
							pstmt_tDBOutput_1.setNull(11, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(11, row1.security_status_id);
						}

						if (row1.security_peticionario_id == null) {
							pstmt_tDBOutput_1.setNull(12, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(12, row1.security_peticionario_id);
						}

						if (row1.coste_mensual == null) {
							pstmt_tDBOutput_1.setNull(13, java.sql.Types.FLOAT);
						} else {
							pstmt_tDBOutput_1.setFloat(13, row1.coste_mensual);
						}

						if (row1.data == null) {
							pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(14, row1.data);
						}

						if (row1.haya_id == null) {
							pstmt_tDBOutput_1.setNull(15, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(15, row1.haya_id);
						}

						if (row1.security_promotion_tipology_id == null) {
							pstmt_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(16, row1.security_promotion_tipology_id);
						}

						if (row1.fecha_aceptacion != null) {
							date_tDBOutput_1 = row1.fecha_aceptacion.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(17, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(17, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(17, java.sql.Types.DATE);
						}

						if (row1.incident_origin_id == null) {
							pstmt_tDBOutput_1.setNull(18, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(18, row1.incident_origin_id);
						}

						if (row1.fecha_aviso_incidencia != null) {
							date_tDBOutput_1 = row1.fecha_aviso_incidencia.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(19, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(19, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(19, java.sql.Types.DATE);
						}

						if (row1.incident_type_id == null) {
							pstmt_tDBOutput_1.setNull(20, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(20, row1.incident_type_id);
						}

						if (row1.vandalized_item_id == null) {
							pstmt_tDBOutput_1.setNull(21, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(21, row1.vandalized_item_id);
						}

						if (row1.peticion_acuda == null) {
							pstmt_tDBOutput_1.setNull(22, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(22, row1.peticion_acuda);
						}

						if (row1.fecha_peticion_acuda != null) {
							date_tDBOutput_1 = row1.fecha_peticion_acuda.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(23, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(23, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(23, java.sql.Types.DATE);
						}

						if (row1.fecha_presencia_acuda != null) {
							date_tDBOutput_1 = row1.fecha_presencia_acuda.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(24, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(24, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(24, java.sql.Types.DATE);
						}

						if (row1.peticion_cerrajero == null) {
							pstmt_tDBOutput_1.setNull(25, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(25, row1.peticion_cerrajero);
						}

						if (row1.fecha_peticion_cerrajero != null) {
							date_tDBOutput_1 = row1.fecha_peticion_cerrajero.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(26, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(26, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(26, java.sql.Types.DATE);
						}

						if (row1.fecha_presencia_cerrajero != null) {
							date_tDBOutput_1 = row1.fecha_presencia_cerrajero.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(27, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(27, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(27, java.sql.Types.DATE);
						}

						if (row1.ocupado == null) {
							pstmt_tDBOutput_1.setNull(28, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(28, row1.ocupado);
						}

						if (row1.fecha_ocupado != null) {
							date_tDBOutput_1 = row1.fecha_ocupado.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(29, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(29, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(29, java.sql.Types.DATE);
						}

						if (row1.observaciones_ocupado_si == null) {
							pstmt_tDBOutput_1.setNull(30, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(30, row1.observaciones_ocupado_si);
						}

						if (row1.restablecer_alarma == null) {
							pstmt_tDBOutput_1.setNull(31, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(31, row1.restablecer_alarma);
						}

						if (row1.reparar_accesos == null) {
							pstmt_tDBOutput_1.setNull(32, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(32, row1.reparar_accesos);
						}

						if (row1.observaciones_ocupado_no == null) {
							pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(33, row1.observaciones_ocupado_no);
						}

						if (row1.occupation_reason_id == null) {
							pstmt_tDBOutput_1.setNull(34, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(34, row1.occupation_reason_id);
						}

						if (row1.rep_file_ids == null) {
							pstmt_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(35, row1.rep_file_ids);
						}

						if (row1.cp_user_id == null) {
							pstmt_tDBOutput_1.setNull(36, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(36, row1.cp_user_id);
						}

						if (row1.other_field_incident_origin == null) {
							pstmt_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(37, row1.other_field_incident_origin);
						}

						if (row1.provider_cra_id == null) {
							pstmt_tDBOutput_1.setNull(38, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(38, row1.provider_cra_id);
						}

						if (row1.false_alarm_type_id == null) {
							pstmt_tDBOutput_1.setNull(39, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(39, row1.false_alarm_type_id);
						}

						if (row1.other_field_incident_type == null) {
							pstmt_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(40, row1.other_field_incident_type);
						}

						if (row1.fecha_restablecer_alarma != null) {
							date_tDBOutput_1 = row1.fecha_restablecer_alarma.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(41, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(41, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(41, java.sql.Types.DATE);
						}

						if (row1.security_billing_scheme_id == null) {
							pstmt_tDBOutput_1.setNull(42, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(42, row1.security_billing_scheme_id);
						}

						if (row1.id_promocion_origen == null) {
							pstmt_tDBOutput_1.setNull(43, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(43, row1.id_promocion_origen);
						}

						if (row1.id_agrupacion_obra_nueva == null) {
							pstmt_tDBOutput_1.setNull(44, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(44, row1.id_agrupacion_obra_nueva);
						}

						if (row1.cp_section_id == null) {
							pstmt_tDBOutput_1.setNull(45, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(45, row1.cp_section_id);
						}

						if (row1.security_element_order_status_id == null) {
							pstmt_tDBOutput_1.setNull(46, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(46, row1.security_element_order_status_id);
						}

						if (row1.key_chain_id == null) {
							pstmt_tDBOutput_1.setNull(47, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(47, row1.key_chain_id);
						}

						if (row1.security_element_sub_status_id == null) {
							pstmt_tDBOutput_1.setNull(48, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(48, row1.security_element_sub_status_id);
						}

						if (row1.check_common_zone == null) {
							pstmt_tDBOutput_1.setNull(49, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(49, row1.check_common_zone);
						}

						if (row1.check_by_asset == null) {
							pstmt_tDBOutput_1.setNull(50, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(50, row1.check_by_asset);
						}

						pstmt_tDBOutput_1.setBigDecimal(51, row1.fail_cost);

						if (row1.observation_fail == null) {
							pstmt_tDBOutput_1.setNull(52, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(52, row1.observation_fail);
						}

						if (row1.security_element_multiple_id == null) {
							pstmt_tDBOutput_1.setNull(53, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(53, row1.security_element_multiple_id);
						}

						if (row1.security_element_vigilance_type_id == null) {
							pstmt_tDBOutput_1.setNull(54, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(54, row1.security_element_vigilance_type_id);
						}

						if (row1.reason_reject_validation_hre == null) {
							pstmt_tDBOutput_1.setNull(55, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(55, row1.reason_reject_validation_hre);
						}

						if (row1.petitioner_cp_user_id == null) {
							pstmt_tDBOutput_1.setNull(56, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(56, row1.petitioner_cp_user_id);
						}

						if (row1.low_petitioner_cp_user_id == null) {
							pstmt_tDBOutput_1.setNull(57, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(57, row1.low_petitioner_cp_user_id);
						}

						if (row1.provider_cp_user_id == null) {
							pstmt_tDBOutput_1.setNull(58, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(58, row1.provider_cp_user_id);
						}

						if (row1.low_provider_cp_user_id == null) {
							pstmt_tDBOutput_1.setNull(59, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(59, row1.low_provider_cp_user_id);
						}

						if (row1.low_security_provider_id == null) {
							pstmt_tDBOutput_1.setNull(60, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(60, row1.low_security_provider_id);
						}

						pstmt_tDBOutput_1.setBigDecimal(61, row1.default_installation_cost);

						pstmt_tDBOutput_1.setBigDecimal(62, row1.default_monthly_cost);

						pstmt_tDBOutput_1.setBigDecimal(63, row1.default_low_cost);

						if (row1.low_task_id == null) {
							pstmt_tDBOutput_1.setNull(64, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(64, row1.low_task_id);
						}

						if (row1.task_id == null) {
							pstmt_tDBOutput_1.setNull(65, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(65, row1.task_id);
						}

						if (row1.work_order_id == null) {
							pstmt_tDBOutput_1.setNull(66, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(66, row1.work_order_id);
						}

						if (row1.security_element_word_order_status_id == null) {
							pstmt_tDBOutput_1.setNull(67, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(67, row1.security_element_word_order_status_id);
						}

						if (row1.asset_occupation_report_id == null) {
							pstmt_tDBOutput_1.setNull(68, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(68, row1.asset_occupation_report_id);
						}

						if (row1.security_element_occupation_validation_status_id == null) {
							pstmt_tDBOutput_1.setNull(69, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(69, row1.security_element_occupation_validation_status_id);
						}

						if (row1.security_element_origin_id == null) {
							pstmt_tDBOutput_1.setNull(70, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(70, row1.security_element_origin_id);
						}

						if (row1.validation_date != null) {
							date_tDBOutput_1 = row1.validation_date.getTime();
							if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
								pstmt_tDBOutput_1.setString(71, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_1.setTimestamp(71, new java.sql.Timestamp(date_tDBOutput_1));
							}
						} else {
							pstmt_tDBOutput_1.setNull(71, java.sql.Types.DATE);
						}

						if (row1.validation_cp_user_id == null) {
							pstmt_tDBOutput_1.setNull(72, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(72, row1.validation_cp_user_id);
						}

						if (row1.occupation_manager_cp_user_id == null) {
							pstmt_tDBOutput_1.setNull(73, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(73, row1.occupation_manager_cp_user_id);
						}

						if (row1.acuda_provider_id == null) {
							pstmt_tDBOutput_1.setNull(74, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(74, row1.acuda_provider_id);
						}

						if (row1.locksmith_provider_id == null) {
							pstmt_tDBOutput_1.setNull(75, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(75, row1.locksmith_provider_id);
						}

						if (row1.procedure_lawyer_id == null) {
							pstmt_tDBOutput_1.setNull(76, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(76, row1.procedure_lawyer_id);
						}

						if (row1.is_recoverable == null) {
							pstmt_tDBOutput_1.setNull(77, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setByte(77, row1.is_recoverable);
						}

						if (row1.acuda_asset_technical_work_id == null) {
							pstmt_tDBOutput_1.setNull(78, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(78, row1.acuda_asset_technical_work_id);
						}

						if (row1.locksmith_asset_technical_work_id == null) {
							pstmt_tDBOutput_1.setNull(79, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(79, row1.locksmith_asset_technical_work_id);
						}

						if (row1.vigilance_security_element_id == null) {
							pstmt_tDBOutput_1.setNull(80, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(80, row1.vigilance_security_element_id);
						}

						if (row1.security_provider_asset_technical_work_id == null) {
							pstmt_tDBOutput_1.setNull(81, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(81, row1.security_provider_asset_technical_work_id);
						}

						if (row1.alarm_security_provider_id == null) {
							pstmt_tDBOutput_1.setNull(82, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(82, row1.alarm_security_provider_id);
						}

						pstmt_tDBOutput_1.addBatch();
						nb_line_tDBOutput_1++;

						batchSizeCounter_tDBOutput_1++;
						if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
							try {
								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
											? 0
											: 1);
								}
								rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
							} catch (java.sql.BatchUpdateException e) {
								globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
								}
								rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_1 = 0;
						}

						tos_count_tDBOutput_1++;

						/**
						 * [tDBOutput_1 main ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_end ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {
					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		static byte[] commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public java.util.Date created;

		public java.util.Date getCreated() {
			return this.created;
		}

		public Integer asset_id;

		public Integer getAsset_id() {
			return this.asset_id;
		}

		public int security_element_id;

		public int getSecurity_element_id() {
			return this.security_element_id;
		}

		public Integer security_provider_id;

		public Integer getSecurity_provider_id() {
			return this.security_provider_id;
		}

		public Integer security_element_service_frequency_id;

		public Integer getSecurity_element_service_frequency_id() {
			return this.security_element_service_frequency_id;
		}

		public BigDecimal cost;

		public BigDecimal getCost() {
			return this.cost;
		}

		public String periodicity;

		public String getPeriodicity() {
			return this.periodicity;
		}

		public java.util.Date period;

		public java.util.Date getPeriod() {
			return this.period;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.id = this.id;
			other.created = this.created;
			other.asset_id = this.asset_id;
			other.security_element_id = this.security_element_id;
			other.security_provider_id = this.security_provider_id;
			other.security_element_service_frequency_id = this.security_element_service_frequency_id;
			other.cost = this.cost;
			other.periodicity = this.periodicity;
			other.period = this.period;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.id = this.id;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRACION_CAJAMAR_Seguridad.length) {
					if (length < 1024 && commonByteArray_MIGRACION_CAJAMAR_Seguridad.length == 0) {
						commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[1024];
					} else {
						commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRACION_CAJAMAR_Seguridad, 0, length);
				strReturn = new String(commonByteArray_MIGRACION_CAJAMAR_Seguridad, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRACION_CAJAMAR_Seguridad.length) {
					if (length < 1024 && commonByteArray_MIGRACION_CAJAMAR_Seguridad.length == 0) {
						commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[1024];
					} else {
						commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MIGRACION_CAJAMAR_Seguridad, 0, length);
				strReturn = new String(commonByteArray_MIGRACION_CAJAMAR_Seguridad, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.created = readDate(dis);

					this.asset_id = readInteger(dis);

					this.security_element_id = dis.readInt();

					this.security_provider_id = readInteger(dis);

					this.security_element_service_frequency_id = readInteger(dis);

					this.cost = (BigDecimal) dis.readObject();

					this.periodicity = readString(dis);

					this.period = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.created = readDate(dis);

					this.asset_id = readInteger(dis);

					this.security_element_id = dis.readInt();

					this.security_provider_id = readInteger(dis);

					this.security_element_service_frequency_id = readInteger(dis);

					this.cost = (BigDecimal) dis.readObject();

					this.periodicity = readString(dis);

					this.period = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// java.util.Date

				writeDate(this.created, dos);

				// Integer

				writeInteger(this.asset_id, dos);

				// int

				dos.writeInt(this.security_element_id);

				// Integer

				writeInteger(this.security_provider_id, dos);

				// Integer

				writeInteger(this.security_element_service_frequency_id, dos);

				// BigDecimal

				dos.writeObject(this.cost);

				// String

				writeString(this.periodicity, dos);

				// java.util.Date

				writeDate(this.period, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// java.util.Date

				writeDate(this.created, dos);

				// Integer

				writeInteger(this.asset_id, dos);

				// int

				dos.writeInt(this.security_element_id);

				// Integer

				writeInteger(this.security_provider_id, dos);

				// Integer

				writeInteger(this.security_element_service_frequency_id, dos);

				// BigDecimal

				dos.writeObject(this.cost);

				// String

				writeString(this.periodicity, dos);

				// java.util.Date

				writeDate(this.period, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",created=" + String.valueOf(created));
			sb.append(",asset_id=" + String.valueOf(asset_id));
			sb.append(",security_element_id=" + String.valueOf(security_element_id));
			sb.append(",security_provider_id=" + String.valueOf(security_provider_id));
			sb.append(
					",security_element_service_frequency_id=" + String.valueOf(security_element_service_frequency_id));
			sb.append(",cost=" + String.valueOf(cost));
			sb.append(",periodicity=" + periodicity);
			sb.append(",period=" + String.valueOf(period));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rowsToCommitCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				String tableName_tDBOutput_2 = "security_element_billing";
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
				calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				long date_tDBOutput_2;

				java.sql.Connection conn_tDBOutput_2 = null;
				conn_tDBOutput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				int count_tDBOutput_2 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables("db_cajamar", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_2 = false;
				while (rsTable_tDBOutput_2.next()) {
					String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
					if (table_tDBOutput_2.equalsIgnoreCase("security_element_billing")) {
						whetherExist_tDBOutput_2 = true;
						break;
					}
				}
				if (whetherExist_tDBOutput_2) {
					try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
						stmtDrop_tDBOutput_2.execute("DROP TABLE `" + tableName_tDBOutput_2 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtCreate_tDBOutput_2.execute("CREATE TABLE `" + tableName_tDBOutput_2
							+ "`(`id` INT(10)   not null ,`created` DATETIME default CURRENT_TIMESTAMP ,`asset_id` INT(10)  ,`security_element_id` INT(10)   not null ,`security_provider_id` INT(10)  ,`security_element_service_frequency_id` INT(10)  ,`cost` DECIMAL(10,2)  ,`periodicity` VARCHAR(255)  ,`period` DATETIME ,primary key(`id`))");
				}

				String insert_tDBOutput_2 = "INSERT INTO `" + "security_element_billing"
						+ "` (`id`,`created`,`asset_id`,`security_element_id`,`security_provider_id`,`security_element_service_frequency_id`,`cost`,`periodicity`,`period`) VALUES (?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_2 = 100;
				int batchSizeCounter_tDBOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
				calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  `security_element_billing`.`id`, \n  `security_element_billing`.`created`, \n  `security_element_billing`.`asse"
						+ "t_id`, \n  `security_element_billing`.`security_element_id`, \n  `security_element_billing`.`security_provider_id`, \n  `se"
						+ "curity_element_billing`.`security_element_service_frequency_id`, \n  `security_element_billing`.`cost`, \n  `security_elem"
						+ "ent_billing`.`periodicity`, \n  `security_element_billing`.`period`\nFROM `security_element_billing`\nINNER JOIN asset a  "
						+ "on `security_element_billing`.asset_id = a.id \nWHERE a.de_entidad_cliente = 'CAJAMAR'";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.id = 0;
						} else {

							row2.id = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.created = null;
						} else {

							if (rs_tDBInput_2.getString(2) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2.getString(2);
								if (!("0000-00-00").equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
									row2.created = rs_tDBInput_2.getTimestamp(2);
								} else {
									row2.created = (java.util.Date) year0_tDBInput_2.clone();
								}
							} else {
								row2.created = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.asset_id = null;
						} else {

							row2.asset_id = rs_tDBInput_2.getInt(3);
							if (rs_tDBInput_2.wasNull()) {
								row2.asset_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.security_element_id = 0;
						} else {

							row2.security_element_id = rs_tDBInput_2.getInt(4);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.security_provider_id = null;
						} else {

							row2.security_provider_id = rs_tDBInput_2.getInt(5);
							if (rs_tDBInput_2.wasNull()) {
								row2.security_provider_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.security_element_service_frequency_id = null;
						} else {

							row2.security_element_service_frequency_id = rs_tDBInput_2.getInt(6);
							if (rs_tDBInput_2.wasNull()) {
								row2.security_element_service_frequency_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.cost = null;
						} else {

							row2.cost = rs_tDBInput_2.getBigDecimal(7);
							if (rs_tDBInput_2.wasNull()) {
								row2.cost = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.periodicity = null;
						} else {

							row2.periodicity = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.period = null;
						} else {

							if (rs_tDBInput_2.getString(9) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2.getString(9);
								if (!("0000-00-00").equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
									row2.period = rs_tDBInput_2.getTimestamp(9);
								} else {
									row2.period = (java.util.Date) year0_tDBInput_2.clone();
								}
							} else {
								row2.period = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 main ] start
						 */

						currentComponent = "tDBOutput_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						whetherReject_tDBOutput_2 = false;
						pstmt_tDBOutput_2.setInt(1, row2.id);

						if (row2.created != null) {
							date_tDBOutput_2 = row2.created.getTime();
							if (date_tDBOutput_2 < year1_tDBOutput_2 || date_tDBOutput_2 >= year10000_tDBOutput_2) {
								pstmt_tDBOutput_2.setString(2, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(date_tDBOutput_2));
							}
						} else {
							pstmt_tDBOutput_2.setNull(2, java.sql.Types.DATE);
						}

						if (row2.asset_id == null) {
							pstmt_tDBOutput_2.setNull(3, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(3, row2.asset_id);
						}

						pstmt_tDBOutput_2.setInt(4, row2.security_element_id);

						if (row2.security_provider_id == null) {
							pstmt_tDBOutput_2.setNull(5, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(5, row2.security_provider_id);
						}

						if (row2.security_element_service_frequency_id == null) {
							pstmt_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(6, row2.security_element_service_frequency_id);
						}

						pstmt_tDBOutput_2.setBigDecimal(7, row2.cost);

						if (row2.periodicity == null) {
							pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(8, row2.periodicity);
						}

						if (row2.period != null) {
							date_tDBOutput_2 = row2.period.getTime();
							if (date_tDBOutput_2 < year1_tDBOutput_2 || date_tDBOutput_2 >= year10000_tDBOutput_2) {
								pstmt_tDBOutput_2.setString(9, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_2.setTimestamp(9, new java.sql.Timestamp(date_tDBOutput_2));
							}
						} else {
							pstmt_tDBOutput_2.setNull(9, java.sql.Types.DATE);
						}

						pstmt_tDBOutput_2.addBatch();
						nb_line_tDBOutput_2++;

						batchSizeCounter_tDBOutput_2++;
						if (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
							try {
								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED
											? 0
											: 1);
								}
								rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
							} catch (java.sql.BatchUpdateException e) {
								globalMap.put("tDBOutput_2_ERROR_MESSAGE", e.getMessage());
								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
								}
								rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_2 = 0;
						}

						tos_count_tDBOutput_2++;

						/**
						 * [tDBOutput_2 main ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_end ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (batchSizeCounter_tDBOutput_2 != 0) {
						int countSum_tDBOutput_2 = 0;

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

						insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {
					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_2 = 0;

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");

				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tDBInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
					if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_2")) != null) {
						pstmtToClose_tDBOutput_2.close();
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		static byte[] commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public java.util.Date created;

		public java.util.Date getCreated() {
			return this.created;
		}

		public java.util.Date modified;

		public java.util.Date getModified() {
			return this.modified;
		}

		public java.util.Date deleted;

		public java.util.Date getDeleted() {
			return this.deleted;
		}

		public String code;

		public String getCode() {
			return this.code;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer cp_user_id;

		public Integer getCp_user_id() {
			return this.cp_user_id;
		}

		public Integer security_element_key_id;

		public Integer getSecurity_element_key_id() {
			return this.security_element_key_id;
		}

		public String data;

		public String getData() {
			return this.data;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.id = this.id;
			other.created = this.created;
			other.modified = this.modified;
			other.deleted = this.deleted;
			other.code = this.code;
			other.name = this.name;
			other.cp_user_id = this.cp_user_id;
			other.security_element_key_id = this.security_element_key_id;
			other.data = this.data;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.id = this.id;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRACION_CAJAMAR_Seguridad.length) {
					if (length < 1024 && commonByteArray_MIGRACION_CAJAMAR_Seguridad.length == 0) {
						commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[1024];
					} else {
						commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MIGRACION_CAJAMAR_Seguridad, 0, length);
				strReturn = new String(commonByteArray_MIGRACION_CAJAMAR_Seguridad, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MIGRACION_CAJAMAR_Seguridad.length) {
					if (length < 1024 && commonByteArray_MIGRACION_CAJAMAR_Seguridad.length == 0) {
						commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[1024];
					} else {
						commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_MIGRACION_CAJAMAR_Seguridad, 0, length);
				strReturn = new String(commonByteArray_MIGRACION_CAJAMAR_Seguridad, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.created = readDate(dis);

					this.modified = readDate(dis);

					this.deleted = readDate(dis);

					this.code = readString(dis);

					this.name = readString(dis);

					this.cp_user_id = readInteger(dis);

					this.security_element_key_id = readInteger(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.created = readDate(dis);

					this.modified = readDate(dis);

					this.deleted = readDate(dis);

					this.code = readString(dis);

					this.name = readString(dis);

					this.cp_user_id = readInteger(dis);

					this.security_element_key_id = readInteger(dis);

					this.data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// java.util.Date

				writeDate(this.created, dos);

				// java.util.Date

				writeDate(this.modified, dos);

				// java.util.Date

				writeDate(this.deleted, dos);

				// String

				writeString(this.code, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.cp_user_id, dos);

				// Integer

				writeInteger(this.security_element_key_id, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// java.util.Date

				writeDate(this.created, dos);

				// java.util.Date

				writeDate(this.modified, dos);

				// java.util.Date

				writeDate(this.deleted, dos);

				// String

				writeString(this.code, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.cp_user_id, dos);

				// Integer

				writeInteger(this.security_element_key_id, dos);

				// String

				writeString(this.data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",created=" + String.valueOf(created));
			sb.append(",modified=" + String.valueOf(modified));
			sb.append(",deleted=" + String.valueOf(deleted));
			sb.append(",code=" + code);
			sb.append(",name=" + name);
			sb.append(",cp_user_id=" + String.valueOf(cp_user_id));
			sb.append(",security_element_key_id=" + String.valueOf(security_element_key_id));
			sb.append(",data=" + data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tDBOutput_3 = 0;

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rowsToCommitCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				String tableName_tDBOutput_3 = "security_element_key_log";
				boolean whetherReject_tDBOutput_3 = false;

				java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
				calendar_tDBOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
				calendar_tDBOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
				long date_tDBOutput_3;

				java.sql.Connection conn_tDBOutput_3 = null;
				conn_tDBOutput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				int count_tDBOutput_3 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables("db_cajamar", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_3 = false;
				while (rsTable_tDBOutput_3.next()) {
					String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
					if (table_tDBOutput_3.equalsIgnoreCase("security_element_key_log")) {
						whetherExist_tDBOutput_3 = true;
						break;
					}
				}
				if (whetherExist_tDBOutput_3) {
					try (java.sql.Statement stmtDrop_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
						stmtDrop_tDBOutput_3.execute("DROP TABLE `" + tableName_tDBOutput_3 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
					stmtCreate_tDBOutput_3.execute("CREATE TABLE `" + tableName_tDBOutput_3
							+ "`(`id` INT(10)   not null ,`created` DATETIME default CURRENT_TIMESTAMP ,`modified` DATETIME default CURRENT_TIMESTAMP ,`deleted` DATETIME ,`code` VARCHAR(50)  ,`name` VARCHAR(100)  ,`cp_user_id` INT(10)  ,`security_element_key_id` INT(10)  ,`data` TEXT ,primary key(`id`))");
				}

				String insert_tDBOutput_3 = "INSERT INTO `" + "security_element_key_log"
						+ "` (`id`,`created`,`modified`,`deleted`,`code`,`name`,`cp_user_id`,`security_element_key_id`,`data`) VALUES (?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_3 = 100;
				int batchSizeCounter_tDBOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
				calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  `security_element_key_log`.`id`, \n  `security_element_key_log`.`created`, \n  `security_element_key_log`.`modi"
						+ "fied`, \n  `security_element_key_log`.`deleted`, \n  `security_element_key_log`.`code`, \n  `security_element_key_log`.`nam"
						+ "e`, \n  `security_element_key_log`.`cp_user_id`, \n  `security_element_key_log`.`security_element_key_id`, \n  `security_el"
						+ "ement_key_log`.`data`\nFROM `security_element_key_log`\nINNER JOIN `security_element` on  `security_element_key_log`.id=`"
						+ "security_element`.id\nINNER JOIN asset a  on `security_element`.id = a.id \nWHERE a.de_entidad_cliente = 'CAJAMAR'";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.id = 0;
						} else {

							row3.id = rs_tDBInput_3.getInt(1);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.created = null;
						} else {

							if (rs_tDBInput_3.getString(2) != null) {
								String dateString_tDBInput_3 = rs_tDBInput_3.getString(2);
								if (!("0000-00-00").equals(dateString_tDBInput_3)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
									row3.created = rs_tDBInput_3.getTimestamp(2);
								} else {
									row3.created = (java.util.Date) year0_tDBInput_3.clone();
								}
							} else {
								row3.created = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.modified = null;
						} else {

							if (rs_tDBInput_3.getString(3) != null) {
								String dateString_tDBInput_3 = rs_tDBInput_3.getString(3);
								if (!("0000-00-00").equals(dateString_tDBInput_3)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
									row3.modified = rs_tDBInput_3.getTimestamp(3);
								} else {
									row3.modified = (java.util.Date) year0_tDBInput_3.clone();
								}
							} else {
								row3.modified = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row3.deleted = null;
						} else {

							if (rs_tDBInput_3.getString(4) != null) {
								String dateString_tDBInput_3 = rs_tDBInput_3.getString(4);
								if (!("0000-00-00").equals(dateString_tDBInput_3)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
									row3.deleted = rs_tDBInput_3.getTimestamp(4);
								} else {
									row3.deleted = (java.util.Date) year0_tDBInput_3.clone();
								}
							} else {
								row3.deleted = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row3.code = null;
						} else {

							row3.code = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row3.name = null;
						} else {

							row3.name = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row3.cp_user_id = null;
						} else {

							row3.cp_user_id = rs_tDBInput_3.getInt(7);
							if (rs_tDBInput_3.wasNull()) {
								row3.cp_user_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row3.security_element_key_id = null;
						} else {

							row3.security_element_key_id = rs_tDBInput_3.getInt(8);
							if (rs_tDBInput_3.wasNull()) {
								row3.security_element_key_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row3.data = null;
						} else {

							row3.data = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 main ] start
						 */

						currentComponent = "tDBOutput_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row3"

							);
						}

						whetherReject_tDBOutput_3 = false;
						pstmt_tDBOutput_3.setInt(1, row3.id);

						if (row3.created != null) {
							date_tDBOutput_3 = row3.created.getTime();
							if (date_tDBOutput_3 < year1_tDBOutput_3 || date_tDBOutput_3 >= year10000_tDBOutput_3) {
								pstmt_tDBOutput_3.setString(2, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(date_tDBOutput_3));
							}
						} else {
							pstmt_tDBOutput_3.setNull(2, java.sql.Types.DATE);
						}

						if (row3.modified != null) {
							date_tDBOutput_3 = row3.modified.getTime();
							if (date_tDBOutput_3 < year1_tDBOutput_3 || date_tDBOutput_3 >= year10000_tDBOutput_3) {
								pstmt_tDBOutput_3.setString(3, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(date_tDBOutput_3));
							}
						} else {
							pstmt_tDBOutput_3.setNull(3, java.sql.Types.DATE);
						}

						if (row3.deleted != null) {
							date_tDBOutput_3 = row3.deleted.getTime();
							if (date_tDBOutput_3 < year1_tDBOutput_3 || date_tDBOutput_3 >= year10000_tDBOutput_3) {
								pstmt_tDBOutput_3.setString(4, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_3.setTimestamp(4, new java.sql.Timestamp(date_tDBOutput_3));
							}
						} else {
							pstmt_tDBOutput_3.setNull(4, java.sql.Types.DATE);
						}

						if (row3.code == null) {
							pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(5, row3.code);
						}

						if (row3.name == null) {
							pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(6, row3.name);
						}

						if (row3.cp_user_id == null) {
							pstmt_tDBOutput_3.setNull(7, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(7, row3.cp_user_id);
						}

						if (row3.security_element_key_id == null) {
							pstmt_tDBOutput_3.setNull(8, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(8, row3.security_element_key_id);
						}

						if (row3.data == null) {
							pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(9, row3.data);
						}

						pstmt_tDBOutput_3.addBatch();
						nb_line_tDBOutput_3++;

						batchSizeCounter_tDBOutput_3++;
						if (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3) {
							try {
								int countSum_tDBOutput_3 = 0;
								for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 == java.sql.Statement.EXECUTE_FAILED
											? 0
											: 1);
								}
								rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
							} catch (java.sql.BatchUpdateException e) {
								globalMap.put("tDBOutput_3_ERROR_MESSAGE", e.getMessage());
								int countSum_tDBOutput_3 = 0;
								for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
								}
								rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_3 = 0;
						}

						tos_count_tDBOutput_3++;

						/**
						 * [tDBOutput_3 main ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_end ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (batchSizeCounter_tDBOutput_3 != 0) {
						int countSum_tDBOutput_3 = 0;

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}
						rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;

						insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {
					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_3 = 0;

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");

				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tDBInput_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
					if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_3")) != null) {
						pstmtToClose_tDBOutput_3.close();
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		static byte[] commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer security_element_id;

		public Integer getSecurity_element_id() {
			return this.security_element_id;
		}

		public Integer security_element_service_fee_id;

		public Integer getSecurity_element_service_fee_id() {
			return this.security_element_service_fee_id;
		}

		public Integer security_status_id;

		public Integer getSecurity_status_id() {
			return this.security_status_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.id = this.id;
			other.security_element_id = this.security_element_id;
			other.security_element_service_fee_id = this.security_element_service_fee_id;
			other.security_status_id = this.security_status_id;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.security_element_id = readInteger(dis);

					this.security_element_service_fee_id = readInteger(dis);

					this.security_status_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.security_element_id = readInteger(dis);

					this.security_element_service_fee_id = readInteger(dis);

					this.security_status_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// Integer

				writeInteger(this.security_element_id, dos);

				// Integer

				writeInteger(this.security_element_service_fee_id, dos);

				// Integer

				writeInteger(this.security_status_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// Integer

				writeInteger(this.security_element_id, dos);

				// Integer

				writeInteger(this.security_element_service_fee_id, dos);

				// Integer

				writeInteger(this.security_status_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",security_element_id=" + String.valueOf(security_element_id));
			sb.append(",security_element_service_fee_id=" + String.valueOf(security_element_service_fee_id));
			sb.append(",security_status_id=" + String.valueOf(security_status_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tDBOutput_4 = 0;

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rowsToCommitCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;

				String tableName_tDBOutput_4 = "security_element_service";
				boolean whetherReject_tDBOutput_4 = false;

				java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
				calendar_tDBOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
				calendar_tDBOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
				long date_tDBOutput_4;

				java.sql.Connection conn_tDBOutput_4 = null;
				conn_tDBOutput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				int count_tDBOutput_4 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_4 = conn_tDBOutput_4.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_4 = dbMetaData_tDBOutput_4.getTables("db_cajamar", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_4 = false;
				while (rsTable_tDBOutput_4.next()) {
					String table_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_NAME");
					if (table_tDBOutput_4.equalsIgnoreCase("security_element_service")) {
						whetherExist_tDBOutput_4 = true;
						break;
					}
				}
				if (whetherExist_tDBOutput_4) {
					try (java.sql.Statement stmtDrop_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
						stmtDrop_tDBOutput_4.execute("DROP TABLE `" + tableName_tDBOutput_4 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
					stmtCreate_tDBOutput_4.execute("CREATE TABLE `" + tableName_tDBOutput_4
							+ "`(`id` INT(10)   not null ,`security_element_id` INT(10)  ,`security_element_service_fee_id` INT(10)  ,`security_status_id` INT(10)  ,primary key(`id`))");
				}

				String insert_tDBOutput_4 = "INSERT INTO `" + "security_element_service"
						+ "` (`id`,`security_element_id`,`security_element_service_fee_id`,`security_status_id`) VALUES (?,?,?,?)";
				int batchSize_tDBOutput_4 = 100;
				int batchSizeCounter_tDBOutput_4 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
				calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT \n  `security_element_service`.`id`, \n  `security_element_service`.`security_element_id`, \n  `security_element_se"
						+ "rvice`.`security_element_service_fee_id`, \n  `security_element_service`.`security_status_id`\nFROM `security_element_serv"
						+ "ice`\nINNER JOIN `security_element` on  `security_element_service`.security_element_id=`security_element`.id\nINNER JOIN"
						+ " asset a  on `security_element`.asset_id = a.id \nWHERE a.de_entidad_cliente = 'CAJAMAR'";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.id = 0;
						} else {

							row4.id = rs_tDBInput_4.getInt(1);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row4.security_element_id = null;
						} else {

							row4.security_element_id = rs_tDBInput_4.getInt(2);
							if (rs_tDBInput_4.wasNull()) {
								row4.security_element_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row4.security_element_service_fee_id = null;
						} else {

							row4.security_element_service_fee_id = rs_tDBInput_4.getInt(3);
							if (rs_tDBInput_4.wasNull()) {
								row4.security_element_service_fee_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row4.security_status_id = null;
						} else {

							row4.security_status_id = rs_tDBInput_4.getInt(4);
							if (rs_tDBInput_4.wasNull()) {
								row4.security_status_id = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_4 main ] start
						 */

						currentComponent = "tDBOutput_4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row4"

							);
						}

						whetherReject_tDBOutput_4 = false;
						pstmt_tDBOutput_4.setInt(1, row4.id);

						if (row4.security_element_id == null) {
							pstmt_tDBOutput_4.setNull(2, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_4.setInt(2, row4.security_element_id);
						}

						if (row4.security_element_service_fee_id == null) {
							pstmt_tDBOutput_4.setNull(3, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_4.setInt(3, row4.security_element_service_fee_id);
						}

						if (row4.security_status_id == null) {
							pstmt_tDBOutput_4.setNull(4, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_4.setInt(4, row4.security_status_id);
						}

						pstmt_tDBOutput_4.addBatch();
						nb_line_tDBOutput_4++;

						batchSizeCounter_tDBOutput_4++;
						if (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4) {
							try {
								int countSum_tDBOutput_4 = 0;
								for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 == java.sql.Statement.EXECUTE_FAILED
											? 0
											: 1);
								}
								rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
							} catch (java.sql.BatchUpdateException e) {
								globalMap.put("tDBOutput_4_ERROR_MESSAGE", e.getMessage());
								int countSum_tDBOutput_4 = 0;
								for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
								}
								rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_4 = 0;
						}

						tos_count_tDBOutput_4++;

						/**
						 * [tDBOutput_4 main ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_end ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
				}

				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (batchSizeCounter_tDBOutput_4 != 0) {
						int countSum_tDBOutput_4 = 0;

						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}
						rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;

						insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					}

				} catch (java.sql.BatchUpdateException e) {
					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());

					int countSum_tDBOutput_4 = 0;
					for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_4 = 0;

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");

				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_4:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tDBInput_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
					if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_4")) != null) {
						pstmtToClose_tDBOutput_4.close();
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		static byte[] commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public int vandalized_item_id;

		public int getVandalized_item_id() {
			return this.vandalized_item_id;
		}

		public int security_element_id;

		public int getSecurity_element_id() {
			return this.security_element_id;
		}

		public Boolean reparar;

		public Boolean getReparar() {
			return this.reparar;
		}

		public java.util.Date fecha_reparacion;

		public java.util.Date getFecha_reparacion() {
			return this.fecha_reparacion;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.id = this.id;
			other.vandalized_item_id = this.vandalized_item_id;
			other.security_element_id = this.security_element_id;
			other.reparar = this.reparar;
			other.fecha_reparacion = this.fecha_reparacion;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.id = this.id;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.vandalized_item_id = dis.readInt();

					this.security_element_id = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.reparar = null;
					} else {
						this.reparar = dis.readBoolean();
					}

					this.fecha_reparacion = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.vandalized_item_id = dis.readInt();

					this.security_element_id = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.reparar = null;
					} else {
						this.reparar = dis.readBoolean();
					}

					this.fecha_reparacion = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.vandalized_item_id);

				// int

				dos.writeInt(this.security_element_id);

				// Boolean

				if (this.reparar == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.reparar);
				}

				// java.util.Date

				writeDate(this.fecha_reparacion, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.vandalized_item_id);

				// int

				dos.writeInt(this.security_element_id);

				// Boolean

				if (this.reparar == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.reparar);
				}

				// java.util.Date

				writeDate(this.fecha_reparacion, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",vandalized_item_id=" + String.valueOf(vandalized_item_id));
			sb.append(",security_element_id=" + String.valueOf(security_element_id));
			sb.append(",reparar=" + String.valueOf(reparar));
			sb.append(",fecha_reparacion=" + String.valueOf(fecha_reparacion));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tDBOutput_6 = 0;

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;
				int rowsToCommitCount_tDBOutput_6 = 0;
				int rejectedCount_tDBOutput_6 = 0;

				String tableName_tDBOutput_6 = "security_vandalized_security_element";
				boolean whetherReject_tDBOutput_6 = false;

				java.util.Calendar calendar_tDBOutput_6 = java.util.Calendar.getInstance();
				calendar_tDBOutput_6.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_6 = calendar_tDBOutput_6.getTime().getTime();
				calendar_tDBOutput_6.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_6 = calendar_tDBOutput_6.getTime().getTime();
				long date_tDBOutput_6;

				java.sql.Connection conn_tDBOutput_6 = null;
				conn_tDBOutput_6 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				int count_tDBOutput_6 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_6 = conn_tDBOutput_6.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_6 = dbMetaData_tDBOutput_6.getTables("db_cajamar", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_6 = false;
				while (rsTable_tDBOutput_6.next()) {
					String table_tDBOutput_6 = rsTable_tDBOutput_6.getString("TABLE_NAME");
					if (table_tDBOutput_6.equalsIgnoreCase("security_vandalized_security_element")) {
						whetherExist_tDBOutput_6 = true;
						break;
					}
				}
				if (whetherExist_tDBOutput_6) {
					try (java.sql.Statement stmtDrop_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
						stmtDrop_tDBOutput_6.execute("DROP TABLE `" + tableName_tDBOutput_6 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
					stmtCreate_tDBOutput_6.execute("CREATE TABLE `" + tableName_tDBOutput_6
							+ "`(`id` INT(10)   not null ,`vandalized_item_id` INT(10)   not null ,`security_element_id` INT(10)   not null ,`reparar` BIT(1)  ,`fecha_reparacion` DATETIME ,primary key(`id`))");
				}

				String insert_tDBOutput_6 = "INSERT INTO `" + "security_vandalized_security_element"
						+ "` (`id`,`vandalized_item_id`,`security_element_id`,`reparar`,`fecha_reparacion`) VALUES (?,?,?,?,?)";
				int batchSize_tDBOutput_6 = 100;
				int batchSizeCounter_tDBOutput_6 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				java.util.Calendar calendar_tDBInput_6 = java.util.Calendar.getInstance();
				calendar_tDBInput_6.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_6 = calendar_tDBInput_6.getTime();
				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "SELECT \n  `security_vandalized_security_element`.`id`, \n  `security_vandalized_security_element`.`vandalized_item_id`, "
						+ "\n  `security_vandalized_security_element`.`security_element_id`, \n  `security_vandalized_security_element`.`reparar`, \n "
						+ " `security_vandalized_security_element`.`fecha_reparacion`\nFROM `security_vandalized_security_element`\nINNER JOIN `secu"
						+ "rity_element` on  `security_vandalized_security_element`.security_element_id=`security_element`.id\nINNER JOIN asset a  "
						+ "on `security_element`.asset_id = a.id \nWHERE a.de_entidad_cliente = 'CAJAMAR'";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row6.id = 0;
						} else {

							row6.id = rs_tDBInput_6.getInt(1);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row6.vandalized_item_id = 0;
						} else {

							row6.vandalized_item_id = rs_tDBInput_6.getInt(2);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row6.security_element_id = 0;
						} else {

							row6.security_element_id = rs_tDBInput_6.getInt(3);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row6.reparar = null;
						} else {

							row6.reparar = rs_tDBInput_6.getBoolean(4);
							if (rs_tDBInput_6.wasNull()) {
								row6.reparar = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row6.fecha_reparacion = null;
						} else {

							if (rs_tDBInput_6.getString(5) != null) {
								String dateString_tDBInput_6 = rs_tDBInput_6.getString(5);
								if (!("0000-00-00").equals(dateString_tDBInput_6)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_6)) {
									row6.fecha_reparacion = rs_tDBInput_6.getTimestamp(5);
								} else {
									row6.fecha_reparacion = (java.util.Date) year0_tDBInput_6.clone();
								}
							} else {
								row6.fecha_reparacion = null;
							}
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_6 main ] start
						 */

						currentComponent = "tDBOutput_6";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row6"

							);
						}

						whetherReject_tDBOutput_6 = false;
						pstmt_tDBOutput_6.setInt(1, row6.id);

						pstmt_tDBOutput_6.setInt(2, row6.vandalized_item_id);

						pstmt_tDBOutput_6.setInt(3, row6.security_element_id);

						if (row6.reparar == null) {
							pstmt_tDBOutput_6.setNull(4, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_6.setBoolean(4, row6.reparar);
						}

						if (row6.fecha_reparacion != null) {
							date_tDBOutput_6 = row6.fecha_reparacion.getTime();
							if (date_tDBOutput_6 < year1_tDBOutput_6 || date_tDBOutput_6 >= year10000_tDBOutput_6) {
								pstmt_tDBOutput_6.setString(5, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_6.setTimestamp(5, new java.sql.Timestamp(date_tDBOutput_6));
							}
						} else {
							pstmt_tDBOutput_6.setNull(5, java.sql.Types.DATE);
						}

						pstmt_tDBOutput_6.addBatch();
						nb_line_tDBOutput_6++;

						batchSizeCounter_tDBOutput_6++;
						if (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6) {
							try {
								int countSum_tDBOutput_6 = 0;
								for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
									countSum_tDBOutput_6 += (countEach_tDBOutput_6 == java.sql.Statement.EXECUTE_FAILED
											? 0
											: 1);
								}
								rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
								insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
							} catch (java.sql.BatchUpdateException e) {
								globalMap.put("tDBOutput_6_ERROR_MESSAGE", e.getMessage());
								int countSum_tDBOutput_6 = 0;
								for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
									countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
								}
								rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
								insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_6 = 0;
						}

						tos_count_tDBOutput_6++;

						/**
						 * [tDBOutput_6 main ] stop
						 */

						/**
						 * [tDBOutput_6 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_6";

						/**
						 * [tDBOutput_6 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_6 process_data_end ] start
						 */

						currentComponent = "tDBOutput_6";

						/**
						 * [tDBOutput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
				}

				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (batchSizeCounter_tDBOutput_6 != 0) {
						int countSum_tDBOutput_6 = 0;

						for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}
						rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;

						insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					}

				} catch (java.sql.BatchUpdateException e) {
					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());

					int countSum_tDBOutput_6 = 0;
					for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
					rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_6 = 0;

				if (pstmt_tDBOutput_6 != null) {

					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");

				}
				resourceMap.put("statementClosed_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6 + deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED", nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED", nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_6:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
			}

			tDBInput_10Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
					if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_6")) != null) {
						pstmtToClose_tDBOutput_6.close();
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		static byte[] commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer security_additional_cost_id;

		public Integer getSecurity_additional_cost_id() {
			return this.security_additional_cost_id;
		}

		public Integer security_element_id;

		public Integer getSecurity_element_id() {
			return this.security_element_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.id = this.id;
			other.security_additional_cost_id = this.security_additional_cost_id;
			other.security_element_id = this.security_element_id;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.security_additional_cost_id = readInteger(dis);

					this.security_element_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.security_additional_cost_id = readInteger(dis);

					this.security_element_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// Integer

				writeInteger(this.security_additional_cost_id, dos);

				// Integer

				writeInteger(this.security_element_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// Integer

				writeInteger(this.security_additional_cost_id, dos);

				// Integer

				writeInteger(this.security_element_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",security_additional_cost_id=" + String.valueOf(security_additional_cost_id));
			sb.append(",security_element_id=" + String.valueOf(security_element_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tDBOutput_10 begin ] start
				 */

				ok_Hash.put("tDBOutput_10", false);
				start_Hash.put("tDBOutput_10", System.currentTimeMillis());

				currentComponent = "tDBOutput_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tDBOutput_10 = 0;

				int nb_line_tDBOutput_10 = 0;
				int nb_line_update_tDBOutput_10 = 0;
				int nb_line_inserted_tDBOutput_10 = 0;
				int nb_line_deleted_tDBOutput_10 = 0;
				int nb_line_rejected_tDBOutput_10 = 0;

				int deletedCount_tDBOutput_10 = 0;
				int updatedCount_tDBOutput_10 = 0;
				int insertedCount_tDBOutput_10 = 0;
				int rowsToCommitCount_tDBOutput_10 = 0;
				int rejectedCount_tDBOutput_10 = 0;

				String tableName_tDBOutput_10 = "security_additional_cost_security_element";
				boolean whetherReject_tDBOutput_10 = false;

				java.util.Calendar calendar_tDBOutput_10 = java.util.Calendar.getInstance();
				calendar_tDBOutput_10.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_10 = calendar_tDBOutput_10.getTime().getTime();
				calendar_tDBOutput_10.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_10 = calendar_tDBOutput_10.getTime().getTime();
				long date_tDBOutput_10;

				java.sql.Connection conn_tDBOutput_10 = null;
				conn_tDBOutput_10 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				int count_tDBOutput_10 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_10 = conn_tDBOutput_10.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_10 = dbMetaData_tDBOutput_10.getTables("db_cajamar", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_10 = false;
				while (rsTable_tDBOutput_10.next()) {
					String table_tDBOutput_10 = rsTable_tDBOutput_10.getString("TABLE_NAME");
					if (table_tDBOutput_10.equalsIgnoreCase("security_additional_cost_security_element")) {
						whetherExist_tDBOutput_10 = true;
						break;
					}
				}
				if (whetherExist_tDBOutput_10) {
					try (java.sql.Statement stmtDrop_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
						stmtDrop_tDBOutput_10.execute("DROP TABLE `" + tableName_tDBOutput_10 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
					stmtCreate_tDBOutput_10.execute("CREATE TABLE `" + tableName_tDBOutput_10
							+ "`(`id` INT(10)   not null ,`security_additional_cost_id` INT(10)  ,`security_element_id` INT(10)  ,primary key(`id`))");
				}

				String insert_tDBOutput_10 = "INSERT INTO `" + "security_additional_cost_security_element"
						+ "` (`id`,`security_additional_cost_id`,`security_element_id`) VALUES (?,?,?)";
				int batchSize_tDBOutput_10 = 100;
				int batchSizeCounter_tDBOutput_10 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_10 = conn_tDBOutput_10.prepareStatement(insert_tDBOutput_10);
				resourceMap.put("pstmt_tDBOutput_10", pstmt_tDBOutput_10);

				/**
				 * [tDBOutput_10 begin ] stop
				 */

				/**
				 * [tDBInput_10 begin ] start
				 */

				ok_Hash.put("tDBInput_10", false);
				start_Hash.put("tDBInput_10", System.currentTimeMillis());

				currentComponent = "tDBInput_10";

				int tos_count_tDBInput_10 = 0;

				java.util.Calendar calendar_tDBInput_10 = java.util.Calendar.getInstance();
				calendar_tDBInput_10.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_10 = calendar_tDBInput_10.getTime();
				int nb_line_tDBInput_10 = 0;
				java.sql.Connection conn_tDBInput_10 = null;
				conn_tDBInput_10 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

				String dbquery_tDBInput_10 = "SELECT \n  `security_additional_cost_security_element`.`id`, \n  `security_additional_cost_security_element`.`security_ad"
						+ "ditional_cost_id`, \n  `security_additional_cost_security_element`.`security_element_id`\nFROM `security_additional_cost_s"
						+ "ecurity_element`\nINNER JOIN `security_element` on  `security_additional_cost_security_element`.security_element_id=`sec"
						+ "urity_element`.id\nINNER JOIN asset a  on `security_element`.asset_id = a.id \nWHERE a.de_entidad_cliente = 'CAJAMAR' ";

				globalMap.put("tDBInput_10_QUERY", dbquery_tDBInput_10);
				java.sql.ResultSet rs_tDBInput_10 = null;

				try {
					rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
					java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
					int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

					String tmpContent_tDBInput_10 = null;

					while (rs_tDBInput_10.next()) {
						nb_line_tDBInput_10++;

						if (colQtyInRs_tDBInput_10 < 1) {
							row10.id = 0;
						} else {

							row10.id = rs_tDBInput_10.getInt(1);
							if (rs_tDBInput_10.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_10 < 2) {
							row10.security_additional_cost_id = null;
						} else {

							row10.security_additional_cost_id = rs_tDBInput_10.getInt(2);
							if (rs_tDBInput_10.wasNull()) {
								row10.security_additional_cost_id = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 3) {
							row10.security_element_id = null;
						} else {

							row10.security_element_id = rs_tDBInput_10.getInt(3);
							if (rs_tDBInput_10.wasNull()) {
								row10.security_element_id = null;
							}
						}

						/**
						 * [tDBInput_10 begin ] stop
						 */

						/**
						 * [tDBInput_10 main ] start
						 */

						currentComponent = "tDBInput_10";

						tos_count_tDBInput_10++;

						/**
						 * [tDBInput_10 main ] stop
						 */

						/**
						 * [tDBInput_10 process_data_begin ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_10 main ] start
						 */

						currentComponent = "tDBOutput_10";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row10"

							);
						}

						whetherReject_tDBOutput_10 = false;
						pstmt_tDBOutput_10.setInt(1, row10.id);

						if (row10.security_additional_cost_id == null) {
							pstmt_tDBOutput_10.setNull(2, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_10.setInt(2, row10.security_additional_cost_id);
						}

						if (row10.security_element_id == null) {
							pstmt_tDBOutput_10.setNull(3, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_10.setInt(3, row10.security_element_id);
						}

						pstmt_tDBOutput_10.addBatch();
						nb_line_tDBOutput_10++;

						batchSizeCounter_tDBOutput_10++;
						if (batchSize_tDBOutput_10 <= batchSizeCounter_tDBOutput_10) {
							try {
								int countSum_tDBOutput_10 = 0;
								for (int countEach_tDBOutput_10 : pstmt_tDBOutput_10.executeBatch()) {
									countSum_tDBOutput_10 += (countEach_tDBOutput_10 == java.sql.Statement.EXECUTE_FAILED
											? 0
											: 1);
								}
								rowsToCommitCount_tDBOutput_10 += countSum_tDBOutput_10;
								insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
							} catch (java.sql.BatchUpdateException e) {
								globalMap.put("tDBOutput_10_ERROR_MESSAGE", e.getMessage());
								int countSum_tDBOutput_10 = 0;
								for (int countEach_tDBOutput_10 : e.getUpdateCounts()) {
									countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
								}
								rowsToCommitCount_tDBOutput_10 += countSum_tDBOutput_10;
								insertedCount_tDBOutput_10 += countSum_tDBOutput_10;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_10 = 0;
						}

						tos_count_tDBOutput_10++;

						/**
						 * [tDBOutput_10 main ] stop
						 */

						/**
						 * [tDBOutput_10 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_10";

						/**
						 * [tDBOutput_10 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_10 process_data_end ] start
						 */

						currentComponent = "tDBOutput_10";

						/**
						 * [tDBOutput_10 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 process_data_end ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 end ] start
						 */

						currentComponent = "tDBInput_10";

					}
				} finally {
					if (rs_tDBInput_10 != null) {
						rs_tDBInput_10.close();
					}
					if (stmt_tDBInput_10 != null) {
						stmt_tDBInput_10.close();
					}
				}

				globalMap.put("tDBInput_10_NB_LINE", nb_line_tDBInput_10);

				ok_Hash.put("tDBInput_10", true);
				end_Hash.put("tDBInput_10", System.currentTimeMillis());

				/**
				 * [tDBInput_10 end ] stop
				 */

				/**
				 * [tDBOutput_10 end ] start
				 */

				currentComponent = "tDBOutput_10";

				try {
					if (batchSizeCounter_tDBOutput_10 != 0) {
						int countSum_tDBOutput_10 = 0;

						for (int countEach_tDBOutput_10 : pstmt_tDBOutput_10.executeBatch()) {
							countSum_tDBOutput_10 += (countEach_tDBOutput_10 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}
						rowsToCommitCount_tDBOutput_10 += countSum_tDBOutput_10;

						insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

					}

				} catch (java.sql.BatchUpdateException e) {
					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());

					int countSum_tDBOutput_10 = 0;
					for (int countEach_tDBOutput_10 : e.getUpdateCounts()) {
						countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
					}
					rowsToCommitCount_tDBOutput_10 += countSum_tDBOutput_10;

					insertedCount_tDBOutput_10 += countSum_tDBOutput_10;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_10 = 0;

				if (pstmt_tDBOutput_10 != null) {

					pstmt_tDBOutput_10.close();
					resourceMap.remove("pstmt_tDBOutput_10");

				}
				resourceMap.put("statementClosed_tDBOutput_10", true);

				nb_line_deleted_tDBOutput_10 = nb_line_deleted_tDBOutput_10 + deletedCount_tDBOutput_10;
				nb_line_update_tDBOutput_10 = nb_line_update_tDBOutput_10 + updatedCount_tDBOutput_10;
				nb_line_inserted_tDBOutput_10 = nb_line_inserted_tDBOutput_10 + insertedCount_tDBOutput_10;
				nb_line_rejected_tDBOutput_10 = nb_line_rejected_tDBOutput_10 + rejectedCount_tDBOutput_10;

				globalMap.put("tDBOutput_10_NB_LINE", nb_line_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_UPDATED", nb_line_update_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_DELETED", nb_line_deleted_tDBOutput_10);
				globalMap.put("tDBOutput_10_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_10);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tDBOutput_10", true);
				end_Hash.put("tDBOutput_10", System.currentTimeMillis());

				/**
				 * [tDBOutput_10 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_10:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tDBInput_11Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_10 finally ] start
				 */

				currentComponent = "tDBInput_10";

				/**
				 * [tDBInput_10 finally ] stop
				 */

				/**
				 * [tDBOutput_10 finally ] start
				 */

				currentComponent = "tDBOutput_10";

				if (resourceMap.get("statementClosed_tDBOutput_10") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_10 = null;
					if ((pstmtToClose_tDBOutput_10 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_10")) != null) {
						pstmtToClose_tDBOutput_10.close();
					}
				}

				/**
				 * [tDBOutput_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		static byte[] commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public int asset_id;

		public int getAsset_id() {
			return this.asset_id;
		}

		public int security_element_id;

		public int getSecurity_element_id() {
			return this.security_element_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.id = this.id;
			other.asset_id = this.asset_id;
			other.security_element_id = this.security_element_id;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.id = this.id;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.asset_id = dis.readInt();

					this.security_element_id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.asset_id = dis.readInt();

					this.security_element_id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.asset_id);

				// int

				dos.writeInt(this.security_element_id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.asset_id);

				// int

				dos.writeInt(this.security_element_id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",asset_id=" + String.valueOf(asset_id));
			sb.append(",security_element_id=" + String.valueOf(security_element_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tDBOutput_11 begin ] start
				 */

				ok_Hash.put("tDBOutput_11", false);
				start_Hash.put("tDBOutput_11", System.currentTimeMillis());

				currentComponent = "tDBOutput_11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tDBOutput_11 = 0;

				int nb_line_tDBOutput_11 = 0;
				int nb_line_update_tDBOutput_11 = 0;
				int nb_line_inserted_tDBOutput_11 = 0;
				int nb_line_deleted_tDBOutput_11 = 0;
				int nb_line_rejected_tDBOutput_11 = 0;

				int deletedCount_tDBOutput_11 = 0;
				int updatedCount_tDBOutput_11 = 0;
				int insertedCount_tDBOutput_11 = 0;
				int rowsToCommitCount_tDBOutput_11 = 0;
				int rejectedCount_tDBOutput_11 = 0;

				String tableName_tDBOutput_11 = "security_element_asset";
				boolean whetherReject_tDBOutput_11 = false;

				java.util.Calendar calendar_tDBOutput_11 = java.util.Calendar.getInstance();
				calendar_tDBOutput_11.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_11 = calendar_tDBOutput_11.getTime().getTime();
				calendar_tDBOutput_11.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_11 = calendar_tDBOutput_11.getTime().getTime();
				long date_tDBOutput_11;

				java.sql.Connection conn_tDBOutput_11 = null;
				conn_tDBOutput_11 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				int count_tDBOutput_11 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_11 = conn_tDBOutput_11.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_11 = dbMetaData_tDBOutput_11.getTables("db_cajamar", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_11 = false;
				while (rsTable_tDBOutput_11.next()) {
					String table_tDBOutput_11 = rsTable_tDBOutput_11.getString("TABLE_NAME");
					if (table_tDBOutput_11.equalsIgnoreCase("security_element_asset")) {
						whetherExist_tDBOutput_11 = true;
						break;
					}
				}
				if (whetherExist_tDBOutput_11) {
					try (java.sql.Statement stmtDrop_tDBOutput_11 = conn_tDBOutput_11.createStatement()) {
						stmtDrop_tDBOutput_11.execute("DROP TABLE `" + tableName_tDBOutput_11 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_11 = conn_tDBOutput_11.createStatement()) {
					stmtCreate_tDBOutput_11.execute("CREATE TABLE `" + tableName_tDBOutput_11
							+ "`(`id` INT(10)   not null ,`asset_id` INT(10)   not null ,`security_element_id` INT(10)   not null ,primary key(`id`))");
				}

				String insert_tDBOutput_11 = "INSERT INTO `" + "security_element_asset"
						+ "` (`id`,`asset_id`,`security_element_id`) VALUES (?,?,?)";
				int batchSize_tDBOutput_11 = 100;
				int batchSizeCounter_tDBOutput_11 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_11 = conn_tDBOutput_11.prepareStatement(insert_tDBOutput_11);
				resourceMap.put("pstmt_tDBOutput_11", pstmt_tDBOutput_11);

				/**
				 * [tDBOutput_11 begin ] stop
				 */

				/**
				 * [tDBInput_11 begin ] start
				 */

				ok_Hash.put("tDBInput_11", false);
				start_Hash.put("tDBInput_11", System.currentTimeMillis());

				currentComponent = "tDBInput_11";

				int tos_count_tDBInput_11 = 0;

				java.util.Calendar calendar_tDBInput_11 = java.util.Calendar.getInstance();
				calendar_tDBInput_11.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_11 = calendar_tDBInput_11.getTime();
				int nb_line_tDBInput_11 = 0;
				java.sql.Connection conn_tDBInput_11 = null;
				conn_tDBInput_11 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

				String dbquery_tDBInput_11 = "SELECT \n  `security_element_asset`.`id`, \n  `security_element_asset`.`asset_id`, \n  `security_element_asset`.`security_"
						+ "element_id`\nFROM `security_element_asset`\nINNER JOIN asset a  on `security_element_asset`.asset_id = a.id \nWHERE a.de_"
						+ "entidad_cliente = 'CAJAMAR'";

				globalMap.put("tDBInput_11_QUERY", dbquery_tDBInput_11);
				java.sql.ResultSet rs_tDBInput_11 = null;

				try {
					rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
					java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
					int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

					String tmpContent_tDBInput_11 = null;

					while (rs_tDBInput_11.next()) {
						nb_line_tDBInput_11++;

						if (colQtyInRs_tDBInput_11 < 1) {
							row11.id = 0;
						} else {

							row11.id = rs_tDBInput_11.getInt(1);
							if (rs_tDBInput_11.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 2) {
							row11.asset_id = 0;
						} else {

							row11.asset_id = rs_tDBInput_11.getInt(2);
							if (rs_tDBInput_11.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 3) {
							row11.security_element_id = 0;
						} else {

							row11.security_element_id = rs_tDBInput_11.getInt(3);
							if (rs_tDBInput_11.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_11 begin ] stop
						 */

						/**
						 * [tDBInput_11 main ] start
						 */

						currentComponent = "tDBInput_11";

						tos_count_tDBInput_11++;

						/**
						 * [tDBInput_11 main ] stop
						 */

						/**
						 * [tDBInput_11 process_data_begin ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_11 main ] start
						 */

						currentComponent = "tDBOutput_11";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row11"

							);
						}

						whetherReject_tDBOutput_11 = false;
						pstmt_tDBOutput_11.setInt(1, row11.id);

						pstmt_tDBOutput_11.setInt(2, row11.asset_id);

						pstmt_tDBOutput_11.setInt(3, row11.security_element_id);

						pstmt_tDBOutput_11.addBatch();
						nb_line_tDBOutput_11++;

						batchSizeCounter_tDBOutput_11++;
						if (batchSize_tDBOutput_11 <= batchSizeCounter_tDBOutput_11) {
							try {
								int countSum_tDBOutput_11 = 0;
								for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11.executeBatch()) {
									countSum_tDBOutput_11 += (countEach_tDBOutput_11 == java.sql.Statement.EXECUTE_FAILED
											? 0
											: 1);
								}
								rowsToCommitCount_tDBOutput_11 += countSum_tDBOutput_11;
								insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
							} catch (java.sql.BatchUpdateException e) {
								globalMap.put("tDBOutput_11_ERROR_MESSAGE", e.getMessage());
								int countSum_tDBOutput_11 = 0;
								for (int countEach_tDBOutput_11 : e.getUpdateCounts()) {
									countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
								}
								rowsToCommitCount_tDBOutput_11 += countSum_tDBOutput_11;
								insertedCount_tDBOutput_11 += countSum_tDBOutput_11;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_11 = 0;
						}

						tos_count_tDBOutput_11++;

						/**
						 * [tDBOutput_11 main ] stop
						 */

						/**
						 * [tDBOutput_11 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_11";

						/**
						 * [tDBOutput_11 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_11 process_data_end ] start
						 */

						currentComponent = "tDBOutput_11";

						/**
						 * [tDBOutput_11 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 process_data_end ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 end ] start
						 */

						currentComponent = "tDBInput_11";

					}
				} finally {
					if (rs_tDBInput_11 != null) {
						rs_tDBInput_11.close();
					}
					if (stmt_tDBInput_11 != null) {
						stmt_tDBInput_11.close();
					}
				}

				globalMap.put("tDBInput_11_NB_LINE", nb_line_tDBInput_11);

				ok_Hash.put("tDBInput_11", true);
				end_Hash.put("tDBInput_11", System.currentTimeMillis());

				/**
				 * [tDBInput_11 end ] stop
				 */

				/**
				 * [tDBOutput_11 end ] start
				 */

				currentComponent = "tDBOutput_11";

				try {
					if (batchSizeCounter_tDBOutput_11 != 0) {
						int countSum_tDBOutput_11 = 0;

						for (int countEach_tDBOutput_11 : pstmt_tDBOutput_11.executeBatch()) {
							countSum_tDBOutput_11 += (countEach_tDBOutput_11 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}
						rowsToCommitCount_tDBOutput_11 += countSum_tDBOutput_11;

						insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

					}

				} catch (java.sql.BatchUpdateException e) {
					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());

					int countSum_tDBOutput_11 = 0;
					for (int countEach_tDBOutput_11 : e.getUpdateCounts()) {
						countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
					}
					rowsToCommitCount_tDBOutput_11 += countSum_tDBOutput_11;

					insertedCount_tDBOutput_11 += countSum_tDBOutput_11;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_11 = 0;

				if (pstmt_tDBOutput_11 != null) {

					pstmt_tDBOutput_11.close();
					resourceMap.remove("pstmt_tDBOutput_11");

				}
				resourceMap.put("statementClosed_tDBOutput_11", true);

				nb_line_deleted_tDBOutput_11 = nb_line_deleted_tDBOutput_11 + deletedCount_tDBOutput_11;
				nb_line_update_tDBOutput_11 = nb_line_update_tDBOutput_11 + updatedCount_tDBOutput_11;
				nb_line_inserted_tDBOutput_11 = nb_line_inserted_tDBOutput_11 + insertedCount_tDBOutput_11;
				nb_line_rejected_tDBOutput_11 = nb_line_rejected_tDBOutput_11 + rejectedCount_tDBOutput_11;

				globalMap.put("tDBOutput_11_NB_LINE", nb_line_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_UPDATED", nb_line_update_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_DELETED", nb_line_deleted_tDBOutput_11);
				globalMap.put("tDBOutput_11_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_11);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tDBOutput_11", true);
				end_Hash.put("tDBOutput_11", System.currentTimeMillis());

				/**
				 * [tDBOutput_11 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_11:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tDBInput_12Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_11 finally ] start
				 */

				currentComponent = "tDBInput_11";

				/**
				 * [tDBInput_11 finally ] stop
				 */

				/**
				 * [tDBOutput_11 finally ] start
				 */

				currentComponent = "tDBOutput_11";

				if (resourceMap.get("statementClosed_tDBOutput_11") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_11 = null;
					if ((pstmtToClose_tDBOutput_11 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_11")) != null) {
						pstmtToClose_tDBOutput_11.close();
					}
				}

				/**
				 * [tDBOutput_11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		static byte[] commonByteArray_MIGRACION_CAJAMAR_Seguridad = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public int security_element_id;

		public int getSecurity_element_id() {
			return this.security_element_id;
		}

		public Integer company_id;

		public Integer getCompany_id() {
			return this.company_id;
		}

		public Integer key_chain_id;

		public Integer getKey_chain_id() {
			return this.key_chain_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.id = this.id;
			other.security_element_id = this.security_element_id;
			other.company_id = this.company_id;
			other.key_chain_id = this.key_chain_id;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.security_element_id = dis.readInt();

					this.company_id = readInteger(dis);

					this.key_chain_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_MIGRACION_CAJAMAR_Seguridad) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.security_element_id = dis.readInt();

					this.company_id = readInteger(dis);

					this.key_chain_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.security_element_id);

				// Integer

				writeInteger(this.company_id, dos);

				// Integer

				writeInteger(this.key_chain_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id);

				// int

				dos.writeInt(this.security_element_id);

				// Integer

				writeInteger(this.company_id, dos);

				// Integer

				writeInteger(this.key_chain_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",security_element_id=" + String.valueOf(security_element_id));
			sb.append(",company_id=" + String.valueOf(company_id));
			sb.append(",key_chain_id=" + String.valueOf(key_chain_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tDBOutput_12 begin ] start
				 */

				ok_Hash.put("tDBOutput_12", false);
				start_Hash.put("tDBOutput_12", System.currentTimeMillis());

				currentComponent = "tDBOutput_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tDBOutput_12 = 0;

				int nb_line_tDBOutput_12 = 0;
				int nb_line_update_tDBOutput_12 = 0;
				int nb_line_inserted_tDBOutput_12 = 0;
				int nb_line_deleted_tDBOutput_12 = 0;
				int nb_line_rejected_tDBOutput_12 = 0;

				int deletedCount_tDBOutput_12 = 0;
				int updatedCount_tDBOutput_12 = 0;
				int insertedCount_tDBOutput_12 = 0;
				int rowsToCommitCount_tDBOutput_12 = 0;
				int rejectedCount_tDBOutput_12 = 0;

				String tableName_tDBOutput_12 = "security_element_company";
				boolean whetherReject_tDBOutput_12 = false;

				java.util.Calendar calendar_tDBOutput_12 = java.util.Calendar.getInstance();
				calendar_tDBOutput_12.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_12 = calendar_tDBOutput_12.getTime().getTime();
				calendar_tDBOutput_12.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_12 = calendar_tDBOutput_12.getTime().getTime();
				long date_tDBOutput_12;

				java.sql.Connection conn_tDBOutput_12 = null;
				conn_tDBOutput_12 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				int count_tDBOutput_12 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_12 = conn_tDBOutput_12.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_12 = dbMetaData_tDBOutput_12.getTables("db_cajamar", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_12 = false;
				while (rsTable_tDBOutput_12.next()) {
					String table_tDBOutput_12 = rsTable_tDBOutput_12.getString("TABLE_NAME");
					if (table_tDBOutput_12.equalsIgnoreCase("security_element_company")) {
						whetherExist_tDBOutput_12 = true;
						break;
					}
				}
				if (whetherExist_tDBOutput_12) {
					try (java.sql.Statement stmtDrop_tDBOutput_12 = conn_tDBOutput_12.createStatement()) {
						stmtDrop_tDBOutput_12.execute("DROP TABLE `" + tableName_tDBOutput_12 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_12 = conn_tDBOutput_12.createStatement()) {
					stmtCreate_tDBOutput_12.execute("CREATE TABLE `" + tableName_tDBOutput_12
							+ "`(`id` INT(10)   not null ,`security_element_id` INT(10)   not null ,`company_id` INT(10)  ,`key_chain_id` INT(10)  ,primary key(`id`))");
				}

				String insert_tDBOutput_12 = "INSERT INTO `" + "security_element_company"
						+ "` (`id`,`security_element_id`,`company_id`,`key_chain_id`) VALUES (?,?,?,?)";
				int batchSize_tDBOutput_12 = 100;
				int batchSizeCounter_tDBOutput_12 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_12 = conn_tDBOutput_12.prepareStatement(insert_tDBOutput_12);
				resourceMap.put("pstmt_tDBOutput_12", pstmt_tDBOutput_12);

				/**
				 * [tDBOutput_12 begin ] stop
				 */

				/**
				 * [tDBInput_12 begin ] start
				 */

				ok_Hash.put("tDBInput_12", false);
				start_Hash.put("tDBInput_12", System.currentTimeMillis());

				currentComponent = "tDBInput_12";

				int tos_count_tDBInput_12 = 0;

				java.util.Calendar calendar_tDBInput_12 = java.util.Calendar.getInstance();
				calendar_tDBInput_12.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_12 = calendar_tDBInput_12.getTime();
				int nb_line_tDBInput_12 = 0;
				java.sql.Connection conn_tDBInput_12 = null;
				conn_tDBInput_12 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

				String dbquery_tDBInput_12 = "SELECT \n  `security_element_company`.`id`, \n  `security_element_company`.`security_element_id`, \n  `security_element_co"
						+ "mpany`.`company_id`, \n  `security_element_company`.`key_chain_id`\nFROM `security_element_company`\nINNER JOIN `security_"
						+ "element` on  `security_element_company`.security_element_id=`security_element`.id\nINNER JOIN asset a  on `security_elem"
						+ "ent`.asset_id = a.id \nWHERE a.de_entidad_cliente = 'CAJAMAR'";

				globalMap.put("tDBInput_12_QUERY", dbquery_tDBInput_12);
				java.sql.ResultSet rs_tDBInput_12 = null;

				try {
					rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
					java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
					int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

					String tmpContent_tDBInput_12 = null;

					while (rs_tDBInput_12.next()) {
						nb_line_tDBInput_12++;

						if (colQtyInRs_tDBInput_12 < 1) {
							row12.id = 0;
						} else {

							row12.id = rs_tDBInput_12.getInt(1);
							if (rs_tDBInput_12.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_12 < 2) {
							row12.security_element_id = 0;
						} else {

							row12.security_element_id = rs_tDBInput_12.getInt(2);
							if (rs_tDBInput_12.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_12 < 3) {
							row12.company_id = null;
						} else {

							row12.company_id = rs_tDBInput_12.getInt(3);
							if (rs_tDBInput_12.wasNull()) {
								row12.company_id = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 4) {
							row12.key_chain_id = null;
						} else {

							row12.key_chain_id = rs_tDBInput_12.getInt(4);
							if (rs_tDBInput_12.wasNull()) {
								row12.key_chain_id = null;
							}
						}

						/**
						 * [tDBInput_12 begin ] stop
						 */

						/**
						 * [tDBInput_12 main ] start
						 */

						currentComponent = "tDBInput_12";

						tos_count_tDBInput_12++;

						/**
						 * [tDBInput_12 main ] stop
						 */

						/**
						 * [tDBInput_12 process_data_begin ] start
						 */

						currentComponent = "tDBInput_12";

						/**
						 * [tDBInput_12 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_12 main ] start
						 */

						currentComponent = "tDBOutput_12";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row12"

							);
						}

						whetherReject_tDBOutput_12 = false;
						pstmt_tDBOutput_12.setInt(1, row12.id);

						pstmt_tDBOutput_12.setInt(2, row12.security_element_id);

						if (row12.company_id == null) {
							pstmt_tDBOutput_12.setNull(3, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_12.setInt(3, row12.company_id);
						}

						if (row12.key_chain_id == null) {
							pstmt_tDBOutput_12.setNull(4, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_12.setInt(4, row12.key_chain_id);
						}

						pstmt_tDBOutput_12.addBatch();
						nb_line_tDBOutput_12++;

						batchSizeCounter_tDBOutput_12++;
						if (batchSize_tDBOutput_12 <= batchSizeCounter_tDBOutput_12) {
							try {
								int countSum_tDBOutput_12 = 0;
								for (int countEach_tDBOutput_12 : pstmt_tDBOutput_12.executeBatch()) {
									countSum_tDBOutput_12 += (countEach_tDBOutput_12 == java.sql.Statement.EXECUTE_FAILED
											? 0
											: 1);
								}
								rowsToCommitCount_tDBOutput_12 += countSum_tDBOutput_12;
								insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
							} catch (java.sql.BatchUpdateException e) {
								globalMap.put("tDBOutput_12_ERROR_MESSAGE", e.getMessage());
								int countSum_tDBOutput_12 = 0;
								for (int countEach_tDBOutput_12 : e.getUpdateCounts()) {
									countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
								}
								rowsToCommitCount_tDBOutput_12 += countSum_tDBOutput_12;
								insertedCount_tDBOutput_12 += countSum_tDBOutput_12;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_12 = 0;
						}

						tos_count_tDBOutput_12++;

						/**
						 * [tDBOutput_12 main ] stop
						 */

						/**
						 * [tDBOutput_12 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_12";

						/**
						 * [tDBOutput_12 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_12 process_data_end ] start
						 */

						currentComponent = "tDBOutput_12";

						/**
						 * [tDBOutput_12 process_data_end ] stop
						 */

						/**
						 * [tDBInput_12 process_data_end ] start
						 */

						currentComponent = "tDBInput_12";

						/**
						 * [tDBInput_12 process_data_end ] stop
						 */

						/**
						 * [tDBInput_12 end ] start
						 */

						currentComponent = "tDBInput_12";

					}
				} finally {
					if (rs_tDBInput_12 != null) {
						rs_tDBInput_12.close();
					}
					if (stmt_tDBInput_12 != null) {
						stmt_tDBInput_12.close();
					}
				}

				globalMap.put("tDBInput_12_NB_LINE", nb_line_tDBInput_12);

				ok_Hash.put("tDBInput_12", true);
				end_Hash.put("tDBInput_12", System.currentTimeMillis());

				/**
				 * [tDBInput_12 end ] stop
				 */

				/**
				 * [tDBOutput_12 end ] start
				 */

				currentComponent = "tDBOutput_12";

				try {
					if (batchSizeCounter_tDBOutput_12 != 0) {
						int countSum_tDBOutput_12 = 0;

						for (int countEach_tDBOutput_12 : pstmt_tDBOutput_12.executeBatch()) {
							countSum_tDBOutput_12 += (countEach_tDBOutput_12 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}
						rowsToCommitCount_tDBOutput_12 += countSum_tDBOutput_12;

						insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

					}

				} catch (java.sql.BatchUpdateException e) {
					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());

					int countSum_tDBOutput_12 = 0;
					for (int countEach_tDBOutput_12 : e.getUpdateCounts()) {
						countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0 : countEach_tDBOutput_12);
					}
					rowsToCommitCount_tDBOutput_12 += countSum_tDBOutput_12;

					insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_12 = 0;

				if (pstmt_tDBOutput_12 != null) {

					pstmt_tDBOutput_12.close();
					resourceMap.remove("pstmt_tDBOutput_12");

				}
				resourceMap.put("statementClosed_tDBOutput_12", true);

				nb_line_deleted_tDBOutput_12 = nb_line_deleted_tDBOutput_12 + deletedCount_tDBOutput_12;
				nb_line_update_tDBOutput_12 = nb_line_update_tDBOutput_12 + updatedCount_tDBOutput_12;
				nb_line_inserted_tDBOutput_12 = nb_line_inserted_tDBOutput_12 + insertedCount_tDBOutput_12;
				nb_line_rejected_tDBOutput_12 = nb_line_rejected_tDBOutput_12 + rejectedCount_tDBOutput_12;

				globalMap.put("tDBOutput_12_NB_LINE", nb_line_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_UPDATED", nb_line_update_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_DELETED", nb_line_deleted_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_12);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tDBOutput_12", true);
				end_Hash.put("tDBOutput_12", System.currentTimeMillis());

				/**
				 * [tDBOutput_12 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_12 finally ] start
				 */

				currentComponent = "tDBInput_12";

				/**
				 * [tDBInput_12 finally ] stop
				 */

				/**
				 * [tDBOutput_12 finally ] start
				 */

				currentComponent = "tDBOutput_12";

				if (resourceMap.get("statementClosed_tDBOutput_12") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_12 = null;
					if ((pstmtToClose_tDBOutput_12 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_12")) != null) {
						pstmtToClose_tDBOutput_12.close();
					}
				}

				/**
				 * [tDBOutput_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBCommit_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Seguridad SeguridadClass = new Seguridad();

		int exitCode = SeguridadClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Seguridad.class.getClassLoader()
					.getResourceAsStream("migracion_cajamar/seguridad_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Seguridad.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Seguridad");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
		connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 359497 characters generated by Talend Open Studio for Data Integration on the
 * October 17, 2023, 12:47:38 PM CEST
 ************************************************************************************************/